# shell_card_management_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellCardManagementApIs
  # CardDetailsResponse Model.
  class CardDetailsResponse < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Payer Id (i.e. Customer Id of the Payment Customer in the Shell Card
    # Platform) of the selected payer.
    # @return [Integer]
    attr_accessor :payer_id

    # Payer Number of the selected payer.
    # @return [String]
    attr_accessor :payer_number

    # Account Id (i.e. Customer Id of the Customer in the Shell Card Platform)
    # of the customer.
    # @return [Integer]
    attr_accessor :account_id

    # Account Number of the customer.
    # @return [String]
    attr_accessor :account_number

    # Account short name.
    # @return [String]
    attr_accessor :account_short_name

    # ISO 3166 Alpha-2 Country Code for the customer and card owning country.
    # @return [String]
    attr_accessor :col_co_country_code

    # ISO 4217 Curreny Code of the local currency.
    # @return [String]
    attr_accessor :local_currency_code

    # Currency symbol of local currency.
    # @return [String]
    attr_accessor :local_currency_symbol

    # Unique Card Id in Cards platform.
    # @return [Integer]
    attr_accessor :card_id

    # Card PAN. In the response body the PAN will be masked if the option is
    # enabled in the Shell Card Platform.
    # @return [String]
    attr_accessor :pan

    # Possible Id’s and description:
    # * 1  Active
    # * 7  Blocked Card
    # * 8  Expired
    # * 9  Cancelled
    # * 10  New
    # * 23  Pending Renewal
    # * 31  Replaced
    # * 41  Temporary Block (Customer)
    # * 42  Temporary Block (Shell)
    # * 43  Fraud
    # * 101 Active (Block in progress) *
    # * 102 Blocked Card (Unblock in progress) *
    # * 103 Active (Cancel in progress) *
    # * 104 Active (Marked as damaged) *
    # * 105 New (Cancel as damaged) *
    # * 106 Active(Scheduled for block) ”#
    # * 107 Blocked Card(Scheduled for unblock)*#
    # * 108 Blocked Card (Cancel in progress) *
    # > Note:
    # •  Items marked with * are intermediate statuses  to indicate that there
    # are pending requests in progress. , The response can contain these
    # intermediate statuses only if the IncludeIntermediateStatus flag is true.
    # •  The placeholder “<Shell Card Platform Status>” in the items marked with
    # # will be replaced with the Shell Card Platform status description. E.g.,
    # “Active (Scheduled for block)”
    # @return [CardDetailsResponseStatusIdEnum]
    attr_accessor :status_id

    # Possible Id’s and description:
    # * 1  Active
    # * 7  Blocked Card
    # * 8  Expired
    # * 9  Cancelled
    # * 10  New
    # * 23  Pending Renewal
    # * 31  Replaced
    # * 41  Temporary Block (Customer)
    # * 42  Temporary Block (Shell)
    # * 43  Fraud
    # * 101 Active (Block in progress) *
    # * 102 Blocked Card (Unblock in progress) *
    # * 103 Active (Cancel in progress) *
    # * 104 Active (Marked as damaged) *
    # * 105 New (Cancel as damaged) *
    # * 106 Active(Scheduled for block) ”#
    # * 107 Blocked Card(Scheduled for unblock) *#
    # * 108 Blocked Card (Cancel in progress) *
    # > Note:
    # •  Items marked with * are intermediate statuses  to indicate that there
    # are pending requests in progress. , The response can contain these
    # intermediate statuses only if the IncludeIntermediateStatus flag is true.
    # •  The placeholder “<Shell Card Platform Status>” in the items marked with
    # # will be replaced with the Shell Card Platform status description. E.g.,
    # “Active (Scheduled for block)”
    # @return [String]
    attr_accessor :status

    # True if odometer input is enabled on the card, else false
    # @return [TrueClass | FalseClass]
    attr_accessor :odometer_prompt

    # True if fleet id input is enabled, else false
    # @return [TrueClass | FalseClass]
    attr_accessor :fleet_id_prompt

    # PIN type:
    #   * `Card` - Card PIN
    #   * `Fleet` - Fleet PIN
    # @return [CardDetailsResponsePINTypeEnum]
    attr_accessor :pin_type

    # True if card has PIN, else false
    # @return [TrueClass | FalseClass]
    attr_accessor :has_pin

    # True if card has Self Selected PIN, else false
    # @return [TrueClass | FalseClass]
    attr_accessor :is_self_selected_pin

    # True if card can be blocked temporarily, else false
    # @return [TrueClass | FalseClass]
    attr_accessor :temporary_block_allowed

    # True/False True if card can be Unblocked, else false
    # @return [TrueClass | FalseClass]
    attr_accessor :unblock_allowed

    # True if card can be blocked permanently, else false
    # @return [TrueClass | FalseClass]
    attr_accessor :permanent_block_allowed

    # Issue number of the card
    # @return [Integer]
    attr_accessor :issue_number

    # Reissue setting of the card. If the card is superseded (i.e. a
    # replacement/new card is issued) then reissue setting of the latest card
    # issued. Reissue setting:
    #   * `True` - Card will be Reissued when nearing its expiry date
    #   * `False` - Card will not be Reissued
    # @return [CardDetailsResponseReissueSettingEnum]
    attr_accessor :reissue_setting

    # POS language identifier. Language Id:
    #   * `1` - German
    #   * `2` - French
    #   * `3` - Bulgarian
    #   * `4` - Croatian
    #   * `5` - Czech
    #   * `6` - Danish
    #   * `7` - Finnish
    #   * `8` - English
    #   * `9` - Greek
    #   * `10` - Chinese
    #   * `11` - Hungarian
    #   * `12` - Italian
    #   * `13` - Luxembourgish
    #   * `14` - Malay
    #   * `15` - Dutch
    #   * `16` - Norwegian, Bokmal
    #   * `17` - Urdu
    #   * `18` - Polish
    #   * `19` - Portuguese
    #   * `20` - Romanian
    #   * `21` - Russian
    #   * `22` - Slovak
    #   * `23` - Slovenian
    #   * `24` - Spanish
    #   * `25` - Swedish
    #   * `26` - Turkish
    #   * `27` - Thai
    #   * `28` - Filipino
    #   * `29` - Estonian
    #   * `30` - Latvian
    #   * `31` - Lithuanian
    # @return [CardDetailsResponseInternationalPOSLanguageIDEnum]
    attr_accessor :international_pos_language_id

    # POS language code. Language code:
    #   * `deu` - German
    #   * `fra` - French
    #   * `bul` - Bulgarian
    #   * `hrv` - Croatian
    #   * `ces` - Czech
    #   * `dan` - Danish
    #   * `fin` - Finnish
    #   * `eng` - English
    #   * `ell` - Greek
    #   * `zho` - Chinese
    #   * `hun` - Hungarian
    #   * `ita` - Italian
    #   * `ltz` - Luxembourgish
    #   * `msa` - Malay
    #   * `nld` - Dutch
    #   * `nob` - Norwegian, Bokmal
    #   * `urd` - Urdu
    #   * `pol` - Polish
    #   * `por` - Portuguese
    #   * `ron` - Romanian
    #   * `rus` - Russian
    #   * `slk` - Slovak
    #   * `slv` - Slovenian
    #   * `spa` - Spanish
    #   * `swe` - Swedish
    #   * `tur` - Turkish
    #   * `tha` - Thai
    #   * `fil` - Filipino
    #   * `est` - Estonian
    #   * `lav` - Latvian
    #   * `lit` - Lithuanian
    # @return [CardDetailsResponseInternationalPOSLanguageCodeEnum]
    attr_accessor :international_pos_language_code

    # POS language identifier. Language Id:
    #   * `1` - German
    #   * `2` - French
    #   * `3` - Bulgarian
    #   * `4` - Croatian
    #   * `5` - Czech
    #   * `6` - Danish
    #   * `7` - Finnish
    #   * `8` - English
    #   * `9` - Greek
    #   * `10` - Chinese
    #   * `11` - Hungarian
    #   * `12` - Italian
    #   * `13` - Luxembourgish
    #   * `14` - Malay
    #   * `15` - Dutch
    #   * `16` - Norwegian, Bokmal
    #   * `17` - Urdu
    #   * `18` - Polish
    #   * `19` - Portuguese
    #   * `20` - Romanian
    #   * `21` - Russian
    #   * `22` - Slovak
    #   * `23` - Slovenian
    #   * `24` - Spanish
    #   * `25` - Swedish
    #   * `26` - Turkish
    #   * `27` - Thai
    #   * `28` - Filipino
    #   * `29` - Estonian
    #   * `30` - Latvian
    #   * `31` - Lithuanian
    # @return [CardDetailsResponseLocalPOSLanguageIDEnum]
    attr_accessor :local_pos_language_id

    # POS language code. Language code:
    #   * `deu` - German
    #   * `fra` - French
    #   * `bul` - Bulgarian
    #   * `hrv` - Croatian
    #   * `ces` - Czech
    #   * `dan` - Danish
    #   * `fin` - Finnish
    #   * `eng` - English
    #   * `ell` - Greek
    #   * `zho` - Chinese
    #   * `hun` - Hungarian
    #   * `ita` - Italian
    #   * `ltz` - Luxembourgish
    #   * `msa` - Malay
    #   * `nld` - Dutch
    #   * `nob` - Norwegian, Bokmal
    #   * `urd` - Urdu
    #   * `pol` - Polish
    #   * `por` - Portuguese
    #   * `ron` - Romanian
    #   * `rus` - Russian
    #   * `slk` - Slovak
    #   * `slv` - Slovenian
    #   * `spa` - Spanish
    #   * `swe` - Swedish
    #   * `tur` - Turkish
    #   * `tha` - Thai
    #   * `fil` - Filipino
    #   * `est` - Estonian
    #   * `lav` - Latvian
    #   * `lit` - Lithuanian
    # @return [CardDetailsResponseLocalPOSLanguageCodeEnum]
    attr_accessor :local_pos_language_code

    # ISO code of the card i.e. first 7 digits of the PAN.
    # @return [String]
    attr_accessor :card_type_code

    # Card Type ID
    # @return [Integer]
    attr_accessor :card_type_id

    # Card Type Name
    # @return [String]
    attr_accessor :card_type_name

    # Token Type ID configured for the Card
    # @return [Integer]
    attr_accessor :token_type_id

    # Token Type Name configured for the Card
    # @return [String]
    attr_accessor :token_type_name

    # True if a chip card, else false
    # @return [TrueClass | FalseClass]
    attr_accessor :is_chip_card

    # True if it is a magnetic stripe card, else false
    # @return [TrueClass | FalseClass]
    attr_accessor :is_mag_strip_card

    # True if it is a virtual card, else false
    # @return [TrueClass | FalseClass]
    attr_accessor :is_virtual_card

    # Purchase category code of the card.
    # @return [String]
    attr_accessor :purchase_category_code

    # Purchase category identifier in the Shell Card Platform.
    # @return [Integer]
    attr_accessor :purchase_category_id

    # Purchase category name
    # @return [String]
    attr_accessor :purchase_category_name

    # True if it is a Commercial Road Transport (CRT) card, else false
    # @return [TrueClass | FalseClass]
    attr_accessor :is_crt

    # True if it is a Fleet card, else false
    # @return [TrueClass | FalseClass]
    attr_accessor :is_fleet

    # True if it is an international card, else false
    # @return [TrueClass | FalseClass]
    attr_accessor :is_international

    # True if it is a national card, else false
    # @return [TrueClass | FalseClass]
    attr_accessor :is_national

    # True if it is allowed at all partner sites, else false
    # @return [TrueClass | FalseClass]
    attr_accessor :is_partner_sites_included

    # True if it is only allowed at Shell sites, else false
    # @return [TrueClass | FalseClass]
    attr_accessor :is_shell_sites_only

    # List of active fuel type product restrictions applied on the card.
    # @return [Array[CardDetailsResponseFuelSetsItems]]
    attr_accessor :fuel_sets

    # List of active non-fuel type product restrictions applied on the card.
    # @return [Array[CardDetailsResponseNonFuelSetsItems]]
    attr_accessor :non_fuel_sets

    # Card issue date.
    # @return [String]
    attr_accessor :issued_date

    # Expiry date of the card.
    # @return [String]
    attr_accessor :expiry_date

    # Card last used date.
    # @return [String]
    attr_accessor :last_used_date

    # Last misused date of the card.
    # @return [String]
    attr_accessor :misuse_date

    # Hot-list status
    # @return [String]
    attr_accessor :temperature

    # Driver name of the card. Note- While ordering card, optional when VRN is
    # passed else mandatory.
    # @return [String]
    attr_accessor :driver_name

    # Vehicle registration number of the card. Note- While ordering card,
    # optional when DriverName is passed else mandatory.
    # @return [String]
    attr_accessor :vrn

    # Text printed on the card as account name.
    # @return [String]
    attr_accessor :emboss_text

    # Existing Card Group ID, under which the replacement card is to be created.
    # Pass “-1” if the replacement card should not be assigned to any card
    # group.
    # Optional. 
    # If not provided, the replacement card will be created under the same card
    # group as the current card.
    # Example- 156
    # @return [Integer]
    attr_accessor :card_group_id

    # Card group name. Note- 1. While ordering card this field is mandatory when
    # IsNewCardGroup is true.
    # @return [String]
    attr_accessor :card_group_name

    # Renewal date of the card. Applicable if ReissueSetting is set to True.
    # @return [String]
    attr_accessor :renewal_date

    # Renewed card id.
    # @return [Integer]
    attr_accessor :renewed_card_id

    # Renewed card status id.
    # @return [Integer]
    attr_accessor :renewed_card_status_id

    # Renewed card status description.
    # @return [String]
    attr_accessor :renewed_card_status

    # Renewed card expiry date.
    # @return [String]
    attr_accessor :renewed_card_expiry_date

    # Renewed card issue number.
    # @return [Integer]
    attr_accessor :renewed_card_issue_number

    # Reissue setting of the renewed new card. Reissue Setting:
    #   * `True` - Card will be sent to production
    #   * `False` - Parent Card is Dormant or the Card is not to be produced
    # @return [CardDetailsResponseRenewedCardReissueSettingEnum]
    attr_accessor :renewed_card_reissue_setting

    # Card Creation Date time
    # @return [String]
    attr_accessor :creation_date

    # Effective date for the Card
    # @return [String]
    attr_accessor :effective_date

    # Card last modified date
    # @return [String]
    attr_accessor :last_modified_date

    # Bundle Id associated with card in the Gateway. This field will have a null
    # value if the card is not associated with any bundle in Gateway or the
    # value of IncludeBundleDetails in request is false.
    # @return [String]
    attr_accessor :bundle_id

    # Delivery address.
    # @return [CardDetailsResponseCardDeliveryAddress]
    attr_accessor :card_delivery_address

    # Delivery address.
    # @return [CardDetailsResponsePINDeliveryAddress]
    attr_accessor :pin_delivery_address

    # Delivery address.
    # @return [Array[CardDetailsResponseCardBlockSchedulesItemsAllOf0]]
    attr_accessor :card_block_schedules

    # Delivery address.
    # @return [ErrorStatus]
    attr_accessor :error

    # API Request
    # @return [String]
    attr_accessor :request_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['payer_id'] = 'PayerId'
      @_hash['payer_number'] = 'PayerNumber'
      @_hash['account_id'] = 'AccountId'
      @_hash['account_number'] = 'AccountNumber'
      @_hash['account_short_name'] = 'AccountShortName'
      @_hash['col_co_country_code'] = 'ColCoCountryCode'
      @_hash['local_currency_code'] = 'LocalCurrencyCode'
      @_hash['local_currency_symbol'] = 'LocalCurrencySymbol'
      @_hash['card_id'] = 'CardId'
      @_hash['pan'] = 'PAN'
      @_hash['status_id'] = 'StatusId'
      @_hash['status'] = 'Status'
      @_hash['odometer_prompt'] = 'OdometerPrompt'
      @_hash['fleet_id_prompt'] = 'FleetIdPrompt'
      @_hash['pin_type'] = 'PINType'
      @_hash['has_pin'] = 'HasPIN'
      @_hash['is_self_selected_pin'] = 'IsSelfSelectedPIN'
      @_hash['temporary_block_allowed'] = 'TemporaryBlockAllowed'
      @_hash['unblock_allowed'] = 'UnblockAllowed'
      @_hash['permanent_block_allowed'] = 'PermanentBlockAllowed'
      @_hash['issue_number'] = 'IssueNumber'
      @_hash['reissue_setting'] = 'ReissueSetting'
      @_hash['international_pos_language_id'] = 'InternationalPOSLanguageID'
      @_hash['international_pos_language_code'] =
        'InternationalPOSLanguageCode'
      @_hash['local_pos_language_id'] = 'LocalPOSLanguageID'
      @_hash['local_pos_language_code'] = 'LocalPOSLanguageCode'
      @_hash['card_type_code'] = 'CardTypeCode'
      @_hash['card_type_id'] = 'CardTypeId'
      @_hash['card_type_name'] = 'CardTypeName'
      @_hash['token_type_id'] = 'TokenTypeId'
      @_hash['token_type_name'] = 'TokenTypeName'
      @_hash['is_chip_card'] = 'IsChipCard'
      @_hash['is_mag_strip_card'] = 'IsMagStripCard'
      @_hash['is_virtual_card'] = 'IsVirtualCard'
      @_hash['purchase_category_code'] = 'PurchaseCategoryCode'
      @_hash['purchase_category_id'] = 'PurchaseCategoryId'
      @_hash['purchase_category_name'] = 'PurchaseCategoryName'
      @_hash['is_crt'] = 'IsCRT'
      @_hash['is_fleet'] = 'IsFleet'
      @_hash['is_international'] = 'IsInternational'
      @_hash['is_national'] = 'IsNational'
      @_hash['is_partner_sites_included'] = 'IsPartnerSitesIncluded'
      @_hash['is_shell_sites_only'] = 'IsShellSitesOnly'
      @_hash['fuel_sets'] = 'FuelSets'
      @_hash['non_fuel_sets'] = 'NonFuelSets'
      @_hash['issued_date'] = 'IssuedDate'
      @_hash['expiry_date'] = 'ExpiryDate'
      @_hash['last_used_date'] = 'LastUsedDate'
      @_hash['misuse_date'] = 'MisuseDate'
      @_hash['temperature'] = 'Temperature'
      @_hash['driver_name'] = 'DriverName'
      @_hash['vrn'] = 'VRN'
      @_hash['emboss_text'] = 'EmbossText'
      @_hash['card_group_id'] = 'CardGroupId'
      @_hash['card_group_name'] = 'CardGroupName'
      @_hash['renewal_date'] = 'RenewalDate'
      @_hash['renewed_card_id'] = 'RenewedCardId'
      @_hash['renewed_card_status_id'] = 'RenewedCardStatusId'
      @_hash['renewed_card_status'] = 'RenewedCardStatus'
      @_hash['renewed_card_expiry_date'] = 'RenewedCardExpiryDate'
      @_hash['renewed_card_issue_number'] = 'RenewedCardIssueNumber'
      @_hash['renewed_card_reissue_setting'] = 'RenewedCardReissueSetting'
      @_hash['creation_date'] = 'CreationDate'
      @_hash['effective_date'] = 'EffectiveDate'
      @_hash['last_modified_date'] = 'LastModifiedDate'
      @_hash['bundle_id'] = 'BundleId'
      @_hash['card_delivery_address'] = 'CardDeliveryAddress'
      @_hash['pin_delivery_address'] = 'PINDeliveryAddress'
      @_hash['card_block_schedules'] = 'CardBlockSchedules'
      @_hash['error'] = 'Error'
      @_hash['request_id'] = 'RequestId'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        payer_id
        payer_number
        account_id
        account_number
        account_short_name
        col_co_country_code
        local_currency_code
        local_currency_symbol
        card_id
        pan
        status_id
        status
        odometer_prompt
        fleet_id_prompt
        pin_type
        has_pin
        is_self_selected_pin
        temporary_block_allowed
        unblock_allowed
        permanent_block_allowed
        issue_number
        reissue_setting
        international_pos_language_id
        international_pos_language_code
        local_pos_language_id
        local_pos_language_code
        card_type_code
        card_type_id
        card_type_name
        token_type_id
        token_type_name
        is_chip_card
        is_mag_strip_card
        is_virtual_card
        purchase_category_code
        purchase_category_id
        purchase_category_name
        is_crt
        is_fleet
        is_international
        is_national
        is_partner_sites_included
        is_shell_sites_only
        fuel_sets
        non_fuel_sets
        issued_date
        expiry_date
        last_used_date
        misuse_date
        temperature
        driver_name
        vrn
        emboss_text
        card_group_id
        card_group_name
        renewal_date
        renewed_card_id
        renewed_card_status_id
        renewed_card_status
        renewed_card_expiry_date
        renewed_card_issue_number
        renewed_card_reissue_setting
        creation_date
        effective_date
        last_modified_date
        bundle_id
        card_delivery_address
        pin_delivery_address
        card_block_schedules
        error
        request_id
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        payer_id
        payer_number
        account_id
        account_number
        account_short_name
        col_co_country_code
        local_currency_code
        local_currency_symbol
        pan
        reissue_setting
        card_type_code
        card_type_id
        card_type_name
        token_type_id
        token_type_name
        purchase_category_code
        purchase_category_name
        issued_date
        last_used_date
        misuse_date
        temperature
        card_group_id
        card_group_name
        renewal_date
        renewed_card_id
        renewed_card_status_id
        renewed_card_issue_number
        creation_date
        effective_date
        last_modified_date
        bundle_id
        card_block_schedules
      ]
    end

    def initialize(payer_id = SKIP,
                   payer_number = SKIP,
                   account_id = SKIP,
                   account_number = SKIP,
                   account_short_name = SKIP,
                   col_co_country_code = SKIP,
                   local_currency_code = SKIP,
                   local_currency_symbol = SKIP,
                   card_id = SKIP,
                   pan = SKIP,
                   status_id = SKIP,
                   status = SKIP,
                   odometer_prompt = SKIP,
                   fleet_id_prompt = SKIP,
                   pin_type = SKIP,
                   has_pin = SKIP,
                   is_self_selected_pin = SKIP,
                   temporary_block_allowed = SKIP,
                   unblock_allowed = SKIP,
                   permanent_block_allowed = SKIP,
                   issue_number = SKIP,
                   reissue_setting = SKIP,
                   international_pos_language_id = SKIP,
                   international_pos_language_code = SKIP,
                   local_pos_language_id = SKIP,
                   local_pos_language_code = SKIP,
                   card_type_code = SKIP,
                   card_type_id = SKIP,
                   card_type_name = SKIP,
                   token_type_id = SKIP,
                   token_type_name = SKIP,
                   is_chip_card = SKIP,
                   is_mag_strip_card = SKIP,
                   is_virtual_card = SKIP,
                   purchase_category_code = SKIP,
                   purchase_category_id = SKIP,
                   purchase_category_name = SKIP,
                   is_crt = SKIP,
                   is_fleet = SKIP,
                   is_international = SKIP,
                   is_national = SKIP,
                   is_partner_sites_included = SKIP,
                   is_shell_sites_only = SKIP,
                   fuel_sets = SKIP,
                   non_fuel_sets = SKIP,
                   issued_date = SKIP,
                   expiry_date = SKIP,
                   last_used_date = SKIP,
                   misuse_date = SKIP,
                   temperature = SKIP,
                   driver_name = SKIP,
                   vrn = SKIP,
                   emboss_text = SKIP,
                   card_group_id = SKIP,
                   card_group_name = SKIP,
                   renewal_date = SKIP,
                   renewed_card_id = SKIP,
                   renewed_card_status_id = SKIP,
                   renewed_card_status = SKIP,
                   renewed_card_expiry_date = SKIP,
                   renewed_card_issue_number = SKIP,
                   renewed_card_reissue_setting = SKIP,
                   creation_date = SKIP,
                   effective_date = SKIP,
                   last_modified_date = SKIP,
                   bundle_id = SKIP,
                   card_delivery_address = SKIP,
                   pin_delivery_address = SKIP,
                   card_block_schedules = SKIP,
                   error = SKIP,
                   request_id = SKIP)
      @payer_id = payer_id unless payer_id == SKIP
      @payer_number = payer_number unless payer_number == SKIP
      @account_id = account_id unless account_id == SKIP
      @account_number = account_number unless account_number == SKIP
      @account_short_name = account_short_name unless account_short_name == SKIP
      @col_co_country_code = col_co_country_code unless col_co_country_code == SKIP
      @local_currency_code = local_currency_code unless local_currency_code == SKIP
      @local_currency_symbol = local_currency_symbol unless local_currency_symbol == SKIP
      @card_id = card_id unless card_id == SKIP
      @pan = pan unless pan == SKIP
      @status_id = status_id unless status_id == SKIP
      @status = status unless status == SKIP
      @odometer_prompt = odometer_prompt unless odometer_prompt == SKIP
      @fleet_id_prompt = fleet_id_prompt unless fleet_id_prompt == SKIP
      @pin_type = pin_type unless pin_type == SKIP
      @has_pin = has_pin unless has_pin == SKIP
      @is_self_selected_pin = is_self_selected_pin unless is_self_selected_pin == SKIP
      @temporary_block_allowed = temporary_block_allowed unless temporary_block_allowed == SKIP
      @unblock_allowed = unblock_allowed unless unblock_allowed == SKIP
      @permanent_block_allowed = permanent_block_allowed unless permanent_block_allowed == SKIP
      @issue_number = issue_number unless issue_number == SKIP
      @reissue_setting = reissue_setting unless reissue_setting == SKIP
      unless international_pos_language_id == SKIP
        @international_pos_language_id =
          international_pos_language_id
      end
      unless international_pos_language_code == SKIP
        @international_pos_language_code =
          international_pos_language_code
      end
      @local_pos_language_id = local_pos_language_id unless local_pos_language_id == SKIP
      @local_pos_language_code = local_pos_language_code unless local_pos_language_code == SKIP
      @card_type_code = card_type_code unless card_type_code == SKIP
      @card_type_id = card_type_id unless card_type_id == SKIP
      @card_type_name = card_type_name unless card_type_name == SKIP
      @token_type_id = token_type_id unless token_type_id == SKIP
      @token_type_name = token_type_name unless token_type_name == SKIP
      @is_chip_card = is_chip_card unless is_chip_card == SKIP
      @is_mag_strip_card = is_mag_strip_card unless is_mag_strip_card == SKIP
      @is_virtual_card = is_virtual_card unless is_virtual_card == SKIP
      @purchase_category_code = purchase_category_code unless purchase_category_code == SKIP
      @purchase_category_id = purchase_category_id unless purchase_category_id == SKIP
      @purchase_category_name = purchase_category_name unless purchase_category_name == SKIP
      @is_crt = is_crt unless is_crt == SKIP
      @is_fleet = is_fleet unless is_fleet == SKIP
      @is_international = is_international unless is_international == SKIP
      @is_national = is_national unless is_national == SKIP
      unless is_partner_sites_included == SKIP
        @is_partner_sites_included =
          is_partner_sites_included
      end
      @is_shell_sites_only = is_shell_sites_only unless is_shell_sites_only == SKIP
      @fuel_sets = fuel_sets unless fuel_sets == SKIP
      @non_fuel_sets = non_fuel_sets unless non_fuel_sets == SKIP
      @issued_date = issued_date unless issued_date == SKIP
      @expiry_date = expiry_date unless expiry_date == SKIP
      @last_used_date = last_used_date unless last_used_date == SKIP
      @misuse_date = misuse_date unless misuse_date == SKIP
      @temperature = temperature unless temperature == SKIP
      @driver_name = driver_name unless driver_name == SKIP
      @vrn = vrn unless vrn == SKIP
      @emboss_text = emboss_text unless emboss_text == SKIP
      @card_group_id = card_group_id unless card_group_id == SKIP
      @card_group_name = card_group_name unless card_group_name == SKIP
      @renewal_date = renewal_date unless renewal_date == SKIP
      @renewed_card_id = renewed_card_id unless renewed_card_id == SKIP
      @renewed_card_status_id = renewed_card_status_id unless renewed_card_status_id == SKIP
      @renewed_card_status = renewed_card_status unless renewed_card_status == SKIP
      @renewed_card_expiry_date = renewed_card_expiry_date unless renewed_card_expiry_date == SKIP
      unless renewed_card_issue_number == SKIP
        @renewed_card_issue_number =
          renewed_card_issue_number
      end
      unless renewed_card_reissue_setting == SKIP
        @renewed_card_reissue_setting =
          renewed_card_reissue_setting
      end
      @creation_date = creation_date unless creation_date == SKIP
      @effective_date = effective_date unless effective_date == SKIP
      @last_modified_date = last_modified_date unless last_modified_date == SKIP
      @bundle_id = bundle_id unless bundle_id == SKIP
      @card_delivery_address = card_delivery_address unless card_delivery_address == SKIP
      @pin_delivery_address = pin_delivery_address unless pin_delivery_address == SKIP
      @card_block_schedules = card_block_schedules unless card_block_schedules == SKIP
      @error = error unless error == SKIP
      @request_id = request_id unless request_id == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      payer_id = hash.key?('PayerId') ? hash['PayerId'] : SKIP
      payer_number = hash.key?('PayerNumber') ? hash['PayerNumber'] : SKIP
      account_id = hash.key?('AccountId') ? hash['AccountId'] : SKIP
      account_number = hash.key?('AccountNumber') ? hash['AccountNumber'] : SKIP
      account_short_name =
        hash.key?('AccountShortName') ? hash['AccountShortName'] : SKIP
      col_co_country_code =
        hash.key?('ColCoCountryCode') ? hash['ColCoCountryCode'] : SKIP
      local_currency_code =
        hash.key?('LocalCurrencyCode') ? hash['LocalCurrencyCode'] : SKIP
      local_currency_symbol =
        hash.key?('LocalCurrencySymbol') ? hash['LocalCurrencySymbol'] : SKIP
      card_id = hash.key?('CardId') ? hash['CardId'] : SKIP
      pan = hash.key?('PAN') ? hash['PAN'] : SKIP
      status_id = hash.key?('StatusId') ? hash['StatusId'] : SKIP
      status = hash.key?('Status') ? hash['Status'] : SKIP
      odometer_prompt =
        hash.key?('OdometerPrompt') ? hash['OdometerPrompt'] : SKIP
      fleet_id_prompt =
        hash.key?('FleetIdPrompt') ? hash['FleetIdPrompt'] : SKIP
      pin_type = hash.key?('PINType') ? hash['PINType'] : SKIP
      has_pin = hash.key?('HasPIN') ? hash['HasPIN'] : SKIP
      is_self_selected_pin =
        hash.key?('IsSelfSelectedPIN') ? hash['IsSelfSelectedPIN'] : SKIP
      temporary_block_allowed =
        hash.key?('TemporaryBlockAllowed') ? hash['TemporaryBlockAllowed'] : SKIP
      unblock_allowed =
        hash.key?('UnblockAllowed') ? hash['UnblockAllowed'] : SKIP
      permanent_block_allowed =
        hash.key?('PermanentBlockAllowed') ? hash['PermanentBlockAllowed'] : SKIP
      issue_number = hash.key?('IssueNumber') ? hash['IssueNumber'] : SKIP
      reissue_setting =
        hash.key?('ReissueSetting') ? hash['ReissueSetting'] : SKIP
      international_pos_language_id =
        hash.key?('InternationalPOSLanguageID') ? hash['InternationalPOSLanguageID'] : SKIP
      international_pos_language_code =
        hash.key?('InternationalPOSLanguageCode') ? hash['InternationalPOSLanguageCode'] : SKIP
      local_pos_language_id =
        hash.key?('LocalPOSLanguageID') ? hash['LocalPOSLanguageID'] : SKIP
      local_pos_language_code =
        hash.key?('LocalPOSLanguageCode') ? hash['LocalPOSLanguageCode'] : SKIP
      card_type_code = hash.key?('CardTypeCode') ? hash['CardTypeCode'] : SKIP
      card_type_id = hash.key?('CardTypeId') ? hash['CardTypeId'] : SKIP
      card_type_name = hash.key?('CardTypeName') ? hash['CardTypeName'] : SKIP
      token_type_id = hash.key?('TokenTypeId') ? hash['TokenTypeId'] : SKIP
      token_type_name =
        hash.key?('TokenTypeName') ? hash['TokenTypeName'] : SKIP
      is_chip_card = hash.key?('IsChipCard') ? hash['IsChipCard'] : SKIP
      is_mag_strip_card =
        hash.key?('IsMagStripCard') ? hash['IsMagStripCard'] : SKIP
      is_virtual_card =
        hash.key?('IsVirtualCard') ? hash['IsVirtualCard'] : SKIP
      purchase_category_code =
        hash.key?('PurchaseCategoryCode') ? hash['PurchaseCategoryCode'] : SKIP
      purchase_category_id =
        hash.key?('PurchaseCategoryId') ? hash['PurchaseCategoryId'] : SKIP
      purchase_category_name =
        hash.key?('PurchaseCategoryName') ? hash['PurchaseCategoryName'] : SKIP
      is_crt = hash.key?('IsCRT') ? hash['IsCRT'] : SKIP
      is_fleet = hash.key?('IsFleet') ? hash['IsFleet'] : SKIP
      is_international =
        hash.key?('IsInternational') ? hash['IsInternational'] : SKIP
      is_national = hash.key?('IsNational') ? hash['IsNational'] : SKIP
      is_partner_sites_included =
        hash.key?('IsPartnerSitesIncluded') ? hash['IsPartnerSitesIncluded'] : SKIP
      is_shell_sites_only =
        hash.key?('IsShellSitesOnly') ? hash['IsShellSitesOnly'] : SKIP
      # Parameter is an array, so we need to iterate through it
      fuel_sets = nil
      unless hash['FuelSets'].nil?
        fuel_sets = []
        hash['FuelSets'].each do |structure|
          fuel_sets << (CardDetailsResponseFuelSetsItems.from_hash(structure) if structure)
        end
      end

      fuel_sets = SKIP unless hash.key?('FuelSets')
      # Parameter is an array, so we need to iterate through it
      non_fuel_sets = nil
      unless hash['NonFuelSets'].nil?
        non_fuel_sets = []
        hash['NonFuelSets'].each do |structure|
          non_fuel_sets << (CardDetailsResponseNonFuelSetsItems.from_hash(structure) if structure)
        end
      end

      non_fuel_sets = SKIP unless hash.key?('NonFuelSets')
      issued_date = hash.key?('IssuedDate') ? hash['IssuedDate'] : SKIP
      expiry_date = hash.key?('ExpiryDate') ? hash['ExpiryDate'] : SKIP
      last_used_date = hash.key?('LastUsedDate') ? hash['LastUsedDate'] : SKIP
      misuse_date = hash.key?('MisuseDate') ? hash['MisuseDate'] : SKIP
      temperature = hash.key?('Temperature') ? hash['Temperature'] : SKIP
      driver_name = hash.key?('DriverName') ? hash['DriverName'] : SKIP
      vrn = hash.key?('VRN') ? hash['VRN'] : SKIP
      emboss_text = hash.key?('EmbossText') ? hash['EmbossText'] : SKIP
      card_group_id = hash.key?('CardGroupId') ? hash['CardGroupId'] : SKIP
      card_group_name =
        hash.key?('CardGroupName') ? hash['CardGroupName'] : SKIP
      renewal_date = hash.key?('RenewalDate') ? hash['RenewalDate'] : SKIP
      renewed_card_id =
        hash.key?('RenewedCardId') ? hash['RenewedCardId'] : SKIP
      renewed_card_status_id =
        hash.key?('RenewedCardStatusId') ? hash['RenewedCardStatusId'] : SKIP
      renewed_card_status =
        hash.key?('RenewedCardStatus') ? hash['RenewedCardStatus'] : SKIP
      renewed_card_expiry_date =
        hash.key?('RenewedCardExpiryDate') ? hash['RenewedCardExpiryDate'] : SKIP
      renewed_card_issue_number =
        hash.key?('RenewedCardIssueNumber') ? hash['RenewedCardIssueNumber'] : SKIP
      renewed_card_reissue_setting =
        hash.key?('RenewedCardReissueSetting') ? hash['RenewedCardReissueSetting'] : SKIP
      creation_date = hash.key?('CreationDate') ? hash['CreationDate'] : SKIP
      effective_date = hash.key?('EffectiveDate') ? hash['EffectiveDate'] : SKIP
      last_modified_date =
        hash.key?('LastModifiedDate') ? hash['LastModifiedDate'] : SKIP
      bundle_id = hash.key?('BundleId') ? hash['BundleId'] : SKIP
      if hash['CardDeliveryAddress']
        card_delivery_address = CardDetailsResponseCardDeliveryAddress.from_hash(hash['CardDeliveryAddress'])
      end
      if hash['PINDeliveryAddress']
        pin_delivery_address = CardDetailsResponsePINDeliveryAddress.from_hash(hash['PINDeliveryAddress'])
      end
      # Parameter is an array, so we need to iterate through it
      card_block_schedules = nil
      unless hash['CardBlockSchedules'].nil?
        card_block_schedules = []
        hash['CardBlockSchedules'].each do |structure|
          card_block_schedules << (CardDetailsResponseCardBlockSchedulesItemsAllOf0.from_hash(structure) if structure)
        end
      end

      card_block_schedules = SKIP unless hash.key?('CardBlockSchedules')
      error = ErrorStatus.from_hash(hash['Error']) if hash['Error']
      request_id = hash.key?('RequestId') ? hash['RequestId'] : SKIP

      # Create object from extracted values.
      CardDetailsResponse.new(payer_id,
                              payer_number,
                              account_id,
                              account_number,
                              account_short_name,
                              col_co_country_code,
                              local_currency_code,
                              local_currency_symbol,
                              card_id,
                              pan,
                              status_id,
                              status,
                              odometer_prompt,
                              fleet_id_prompt,
                              pin_type,
                              has_pin,
                              is_self_selected_pin,
                              temporary_block_allowed,
                              unblock_allowed,
                              permanent_block_allowed,
                              issue_number,
                              reissue_setting,
                              international_pos_language_id,
                              international_pos_language_code,
                              local_pos_language_id,
                              local_pos_language_code,
                              card_type_code,
                              card_type_id,
                              card_type_name,
                              token_type_id,
                              token_type_name,
                              is_chip_card,
                              is_mag_strip_card,
                              is_virtual_card,
                              purchase_category_code,
                              purchase_category_id,
                              purchase_category_name,
                              is_crt,
                              is_fleet,
                              is_international,
                              is_national,
                              is_partner_sites_included,
                              is_shell_sites_only,
                              fuel_sets,
                              non_fuel_sets,
                              issued_date,
                              expiry_date,
                              last_used_date,
                              misuse_date,
                              temperature,
                              driver_name,
                              vrn,
                              emboss_text,
                              card_group_id,
                              card_group_name,
                              renewal_date,
                              renewed_card_id,
                              renewed_card_status_id,
                              renewed_card_status,
                              renewed_card_expiry_date,
                              renewed_card_issue_number,
                              renewed_card_reissue_setting,
                              creation_date,
                              effective_date,
                              last_modified_date,
                              bundle_id,
                              card_delivery_address,
                              pin_delivery_address,
                              card_block_schedules,
                              error,
                              request_id)
    end
  end
end
