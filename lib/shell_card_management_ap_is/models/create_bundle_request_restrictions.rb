# shell_card_management_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellCardManagementApIs
  # Restrictions to be applied on the bundle. Mandatory
  class CreateBundleRequestRestrictions < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Usage restrictions such as value, volume and transaction count restricted
    # per day, week, month, annum, lifetime and transaction to be applied on the
    # bundle.
    # Mandatory
    # @return [String]
    attr_accessor :usage_restriction_action

    # The value indicates what actions to be performed with respect to day time
    # restriction. 
    # Mandatory
    # Allowed values –
    # •	Add: Apply the given restriction on the bundle.
    # •	Default: No Day/Time restriction will be applied on the bundle in
    # Gateway.
    # @return [String]
    attr_accessor :day_time_restriction_action

    # The value indicates what actions to be performed with respect to location
    # restriction. 
    # Mandatory
    # Allowed values –
    # •	Add: Apply the given restriction on the bundle.
    # •	Default: No location restriction will be applied on the bundle in
    # Gateway.
    # @return [String]
    attr_accessor :location_restriction_action

    # Day/time restrictions such as weekdays and time range to be applied on the
    # bundle.
    # Mandatory if respective action is set as “Add”.
    # The details of DayTimeRestriction entity is given below.
    # @return [DayTimeRestrictions]
    attr_accessor :day_time_restrictions

    # Location restrictions to be applied on the bundle which either allows or
    # restricts using the cards, which are under the bundle, in the specified
    # locations. 
    # Mandatory if respective action is set as “Add”.
    # Details of location restrictions are given below.
    # @return [LocationRestrictions]
    attr_accessor :location_restrictions

    # Location restrictions to be applied on the bundle which either allows or
    # restricts using the cards, which are under the bundle, in the specified
    # locations. 
    # Mandatory if respective action is set as “Add”.
    # Details of location restrictions are given below.
    # @return [ProductRestrictions]
    attr_accessor :product_restrictions

    # Location restrictions to be applied on the bundle which either allows or
    # restricts using the cards, which are under the bundle, in the specified
    # locations. 
    # Mandatory if respective action is set as “Add”.
    # Details of location restrictions are given below.
    # @return [UsageRestrictions]
    attr_accessor :usage_restrictions

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['usage_restriction_action'] = 'UsageRestrictionAction'
      @_hash['day_time_restriction_action'] = 'DayTimeRestrictionAction'
      @_hash['location_restriction_action'] = 'LocationRestrictionAction'
      @_hash['day_time_restrictions'] = 'DayTimeRestrictions'
      @_hash['location_restrictions'] = 'LocationRestrictions'
      @_hash['product_restrictions'] = 'ProductRestrictions'
      @_hash['usage_restrictions'] = 'UsageRestrictions'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        day_time_restrictions
        location_restrictions
        product_restrictions
        usage_restrictions
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        usage_restriction_action
        day_time_restriction_action
      ]
    end

    def initialize(usage_restriction_action = nil,
                   day_time_restriction_action = nil,
                   location_restriction_action = nil,
                   day_time_restrictions = SKIP,
                   location_restrictions = SKIP,
                   product_restrictions = SKIP,
                   usage_restrictions = SKIP)
      @usage_restriction_action = usage_restriction_action
      @day_time_restriction_action = day_time_restriction_action
      @location_restriction_action = location_restriction_action
      @day_time_restrictions = day_time_restrictions unless day_time_restrictions == SKIP
      @location_restrictions = location_restrictions unless location_restrictions == SKIP
      @product_restrictions = product_restrictions unless product_restrictions == SKIP
      @usage_restrictions = usage_restrictions unless usage_restrictions == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      usage_restriction_action =
        hash.key?('UsageRestrictionAction') ? hash['UsageRestrictionAction'] : nil
      day_time_restriction_action =
        hash.key?('DayTimeRestrictionAction') ? hash['DayTimeRestrictionAction'] : nil
      location_restriction_action =
        hash.key?('LocationRestrictionAction') ? hash['LocationRestrictionAction'] : nil
      day_time_restrictions = DayTimeRestrictions.from_hash(hash['DayTimeRestrictions']) if
        hash['DayTimeRestrictions']
      location_restrictions = LocationRestrictions.from_hash(hash['LocationRestrictions']) if
        hash['LocationRestrictions']
      product_restrictions = ProductRestrictions.from_hash(hash['ProductRestrictions']) if
        hash['ProductRestrictions']
      usage_restrictions = UsageRestrictions.from_hash(hash['UsageRestrictions']) if
        hash['UsageRestrictions']

      # Create object from extracted values.
      CreateBundleRequestRestrictions.new(usage_restriction_action,
                                          day_time_restriction_action,
                                          location_restriction_action,
                                          day_time_restrictions,
                                          location_restrictions,
                                          product_restrictions,
                                          usage_restrictions)
    end
  end
end
