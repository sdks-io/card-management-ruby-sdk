# shell_card_management_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellCardManagementApIs
  # AccountRestrictionRequest Model.
  class AccountRestrictionRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Collecting Company Id of the selected payer. 
    # Optional if ColCoCode is passed else Mandatory.
    # Example:
    # 1 for Philippines
    # 5 for UK
    # @return [Integer]
    attr_accessor :col_co_id

    # Collecting Company Code (Shell Code) of the selected payer. 
    # Mandatory for serviced OUs such as Romania, Latvia, Lithuania, Estonia,
    # Ukraine etc. It is optional for other countries if ColCoID is provided.
    # Example:
    # 86 for Philippines
    # 5 for UK
    # @return [Integer]
    attr_accessor :col_co_code

    # Payer Id of the selected payer.
    # Optional if PayerNumber is passed else Mandatory
    # Example: 123456
    # @return [Integer]
    attr_accessor :payer_id

    # Payer Number of the selected payer.
    # Optional if PayerId is passed else Mandatory
    # Example: GB000000123
    # @return [String]
    attr_accessor :payer_number

    # Account ID of the customer on which the restrictions will be applied.
    # Optional if AccountNumber is passed, else Mandatory. 
    # Example: 123456
    # @return [Integer]
    attr_accessor :account_id

    # Account Number of the customer on which the restrictions will be applied.
    # Optional if AccountId is passed, else Mandatory.
    # Example: GB000000123
    # @return [String]
    attr_accessor :account_number

    # True/False.
    # If true, the usage restrictions applied on the account will be removed.
    # Optional
    # Default: False
    # @return [TrueClass | FalseClass]
    attr_accessor :reset_usage_restrictions

    # True/False.
    # If true, the usage restrictions applied on the account will be removed.
    # Optional
    # Default: False
    # @return [Object]
    attr_accessor :usage_restrictions

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['col_co_id'] = 'ColCoId'
      @_hash['col_co_code'] = 'ColCoCode'
      @_hash['payer_id'] = 'PayerId'
      @_hash['payer_number'] = 'PayerNumber'
      @_hash['account_id'] = 'AccountId'
      @_hash['account_number'] = 'AccountNumber'
      @_hash['reset_usage_restrictions'] = 'ResetUsageRestrictions'
      @_hash['usage_restrictions'] = 'UsageRestrictions'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        col_co_id
        col_co_code
        payer_id
        payer_number
        account_id
        account_number
        reset_usage_restrictions
        usage_restrictions
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        col_co_id
        col_co_code
        payer_id
        payer_number
        account_id
        account_number
        reset_usage_restrictions
      ]
    end

    def initialize(col_co_id = SKIP, col_co_code = SKIP, payer_id = SKIP,
                   payer_number = SKIP, account_id = SKIP,
                   account_number = SKIP, reset_usage_restrictions = SKIP,
                   usage_restrictions = SKIP)
      @col_co_id = col_co_id unless col_co_id == SKIP
      @col_co_code = col_co_code unless col_co_code == SKIP
      @payer_id = payer_id unless payer_id == SKIP
      @payer_number = payer_number unless payer_number == SKIP
      @account_id = account_id unless account_id == SKIP
      @account_number = account_number unless account_number == SKIP
      @reset_usage_restrictions = reset_usage_restrictions unless reset_usage_restrictions == SKIP
      @usage_restrictions = usage_restrictions unless usage_restrictions == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      col_co_id = hash.key?('ColCoId') ? hash['ColCoId'] : SKIP
      col_co_code = hash.key?('ColCoCode') ? hash['ColCoCode'] : SKIP
      payer_id = hash.key?('PayerId') ? hash['PayerId'] : SKIP
      payer_number = hash.key?('PayerNumber') ? hash['PayerNumber'] : SKIP
      account_id = hash.key?('AccountId') ? hash['AccountId'] : SKIP
      account_number = hash.key?('AccountNumber') ? hash['AccountNumber'] : SKIP
      reset_usage_restrictions =
        hash.key?('ResetUsageRestrictions') ? hash['ResetUsageRestrictions'] : SKIP
      usage_restrictions =
        hash.key?('UsageRestrictions') ? hash['UsageRestrictions'] : SKIP

      # Create object from extracted values.
      AccountRestrictionRequest.new(col_co_id,
                                    col_co_code,
                                    payer_id,
                                    payer_number,
                                    account_id,
                                    account_number,
                                    reset_usage_restrictions,
                                    usage_restrictions)
    end
  end
end
