# shell_card_management_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellCardManagementApIs
  # UpdateMPayRegStatusRequestMPayRequestsItems Model.
  class UpdateMPayRegStatusRequestMPayRequestsItems < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # List of MPay Request to be updated for Fleet Manager approval status.
    # Mandatory
    # Maximum number of requests that can be submitted are 50
    # @return [String]
    attr_accessor :global_request_id

    # Status of mobile payment registration request
    # Mandatory.
    # Allowed values –
    # •    Approved
    # •   Rejected
    # @return [String]
    attr_accessor :status

    # Approver’s User ID
    # ApproverUserID is mandatory when Status is Approved else optional
    # @return [String]
    attr_accessor :approver_user_id

    # Approver’s display name
    # Mandatory when Status is Approved else optional.
    # @return [String]
    attr_accessor :approver_user_display_name

    # Reason for Fleet Manager approval/rejection.
    # Optional
    # @return [String]
    attr_accessor :reason

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['global_request_id'] = 'GlobalRequestID'
      @_hash['status'] = 'Status'
      @_hash['approver_user_id'] = 'ApproverUserID'
      @_hash['approver_user_display_name'] = 'ApproverUserDisplayName'
      @_hash['reason'] = 'Reason'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        global_request_id
        status
        approver_user_id
        approver_user_display_name
        reason
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(global_request_id = SKIP, status = SKIP,
                   approver_user_id = SKIP, approver_user_display_name = SKIP,
                   reason = SKIP)
      @global_request_id = global_request_id unless global_request_id == SKIP
      @status = status unless status == SKIP
      @approver_user_id = approver_user_id unless approver_user_id == SKIP
      unless approver_user_display_name == SKIP
        @approver_user_display_name =
          approver_user_display_name
      end
      @reason = reason unless reason == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      global_request_id =
        hash.key?('GlobalRequestID') ? hash['GlobalRequestID'] : SKIP
      status = hash.key?('Status') ? hash['Status'] : SKIP
      approver_user_id =
        hash.key?('ApproverUserID') ? hash['ApproverUserID'] : SKIP
      approver_user_display_name =
        hash.key?('ApproverUserDisplayName') ? hash['ApproverUserDisplayName'] : SKIP
      reason = hash.key?('Reason') ? hash['Reason'] : SKIP

      # Create object from extracted values.
      UpdateMPayRegStatusRequestMPayRequestsItems.new(global_request_id,
                                                      status,
                                                      approver_user_id,
                                                      approver_user_display_name,
                                                      reason)
    end
  end
end
