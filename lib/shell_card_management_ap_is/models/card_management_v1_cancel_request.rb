# shell_card_management_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellCardManagementApIs
  # CardManagementV1CancelRequest Model.
  class CardManagementV1CancelRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # List of CancelCardRequest entity. 
    # Each card in the list will be Cancelled. 
    # The details of the entity are given below.
    # @return [Array[UpdateCard]]
    attr_accessor :cards

    # Reason id for cancelling the card.<br />
    # Optional if ReasonText is passed, else mandatory<br />
    # When passed, the reason Id will be validated with the allowed reason idâ€™s
    # configured for the card type of the card.<br />
    # If the reason Id is not allowed, then it will be included on the error
    # cards response.
    # Possible values:
    # 1 (Lost)
    # 2 (Stolen)
    # 3 (Card no longer required)
    # @return [Integer]
    attr_accessor :reason_id

    # Reason text for cancelling the card.<br />
    # Optional if ReasonId is passed, else mandatory<br />
    # When Reason Id is not known to the client, the reason text can be
    # passed.<br />
    # When Reason Text is passed and the Target Status is either Block or
    # Damaged, the text will be validated with the allowed list of values
    # configured for the card type of the card.
    # If the text is not allowed, then it will be included on the error cards
    # response.
    # However, if the Target status is Temporary block or Unblock then the text
    # will be submitted 
    # Possible Values:
    # 1) Lost
    # 2) Stolen
    # 3) Card no longer required
    # @return [String]
    attr_accessor :reason_text

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['cards'] = 'Cards'
      @_hash['reason_id'] = 'ReasonId'
      @_hash['reason_text'] = 'ReasonText'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        reason_id
        reason_text
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        reason_id
        reason_text
      ]
    end

    def initialize(cards = nil, reason_id = SKIP, reason_text = SKIP)
      @cards = cards
      @reason_id = reason_id unless reason_id == SKIP
      @reason_text = reason_text unless reason_text == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      cards = nil
      unless hash['Cards'].nil?
        cards = []
        hash['Cards'].each do |structure|
          cards << (UpdateCard.from_hash(structure) if structure)
        end
      end

      cards = nil unless hash.key?('Cards')
      reason_id = hash.key?('ReasonId') ? hash['ReasonId'] : SKIP
      reason_text = hash.key?('ReasonText') ? hash['ReasonText'] : SKIP

      # Create object from extracted values.
      CardManagementV1CancelRequest.new(cards,
                                        reason_id,
                                        reason_text)
    end
  end
end
