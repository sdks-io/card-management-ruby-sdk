# shell_card_management_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellCardManagementApIs
  # ScheduleCardBlockCardsItems Model.
  class ScheduleCardBlockCardsItems < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Collecting Company Code (Shell Code) of the selected payer. 
    # Mandatory for serviced OUs such as Romania, Latvia, Lithuania, Estonia,
    # Ukraine etc. It is optional for other countries if ColCoID is provided.
    # Example:
    # 86-Philippines
    # 5-UK
    # @return [Integer]
    attr_accessor :col_co_code

    # Collecting Company Id of the selected payer. 
    # Optional if ColCoCode is passed else Mandatory.
    # Example:
    # 1-Philippines
    # 5-UK
    # @return [Integer]
    attr_accessor :col_co_id

    # Account Id of the customer.
    # Optional if AccountNumber is passed, else Mandatory.
    # @return [Integer]
    attr_accessor :account_id

    # Account Number of the customer.
    # Optional if AccountId is passed, else Mandatory.
    # @return [String]
    attr_accessor :account_number

    # Payer id of the customer.
    # Optional if PayerNumber is passed, else Mandatory. 
    # Example: 123456
    # @return [Integer]
    attr_accessor :payer_id

    # PayerNumber of the customer.
    # Optional if PayerId is passed, else Mandatory.
    # @return [String]
    attr_accessor :payer_number

    # Unique Id of the card.
    # Optional if PAN is passed, else Mandatory.
    # @return [Integer]
    attr_accessor :card_id

    # PAN of the card.
    # Optional if CardId is passed, else Mandatory.
    # @return [String]
    attr_accessor :pan

    # Card PAN ID.
    # Optional if CardId is given, else mandatory.
    # Note: PANID is ignored if CardId is given.
    # @return [String]
    attr_accessor :panid

    # Expiry date of the card.
    # Optional if CardId is passed, else Mandatory.
    # Format: yyyyMMdd
    # Example: 20170930
    # @return [String]
    attr_accessor :card_expiry_date

    # Action
    # Mandatory
    # Possible values are:
    # •    AddOrUpdate – adds a new request or updates any existing requests,
    # with overlapping dates, for the card
    # •    AddAndOverwriteAll - all the existing requests of the given card will
    # be removed and a new request with the specified FromDate and ToDate will
    # be added.
    # •    Delete – deletes any existing request with the same start date and
    # end date for the card
    # •    DeleteAll – deletes all saved future dated requests (all block and
    # unblock requests) of the card.
    # @return [String]
    attr_accessor :action

    # Effective start date of Block / Unblock
    # Allowed Formats: –
    # •    yyyyMMdd
    # •    yyyyMMdd HH:mm
    # Eg: 20230512 14:30, 20230512
    # Optional
    # Default value: 
    # •     If the card status is “Active” then Current date & Time
    # •    If the card status is “TemporaryBlock (Customer)” then null.
    # Note:
    # •    Time is considered only when “IsTimeSupported” is true else it will
    # be treated as a date.
    # •    Time will be passed in UTC time-zone.
    # •    If the Card Status is “Temporary Block (Customer)” and FromDate is
    # provided – The fromdate & time is considered as starting period of unblock
    # request.
    # @return [String]
    attr_accessor :from_date

    # Effective end date of Block / Unblock
    # Allowed Formats: –
    # •    yyyyMMdd
    # •    yyyyMMdd HH:mm
    # Eg: 20230512 14:30, 20230512
    # Optional – When the Card status is Active else mandatory.
    # When not provided, the card will remain blocked until manually unblocked.
    # Note:
    # •    Time is considered only when the “IsTimeSupported” flag is set as
    # true, else it will be considered as only date.
    # •    Date & Time passed in the request will be considered in UTC
    # time-zone.
    # •    If the card is currently in ‘Temporary Block (Customer)’ status, then
    # this date is treated as the unblock date and is mandatory.
    # •    If the Card Status is “Temporary Block (Customer)” and FromDate &
    # ToDate is provided - The request will be considered as a scheduled
    # specific period unblock request.
    # @return [String]
    attr_accessor :to_date

    # The caller to be notified with the status of the scheduled card block /
    # unblock request.
    # Mandatory, if NotifyCaller is true. 
    # Maximum field length: 20
    # @return [String]
    attr_accessor :caller

    # True/False.
    # Optional.
    # Default: False
    # If true, the caller would be notified back with the status as success or
    # failure after the scheduled card block / unblock request is processed.
    # @return [TrueClass | FalseClass]
    attr_accessor :notify_caller

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['col_co_code'] = 'ColCoCode'
      @_hash['col_co_id'] = 'ColCoId'
      @_hash['account_id'] = 'AccountId'
      @_hash['account_number'] = 'AccountNumber'
      @_hash['payer_id'] = 'PayerId'
      @_hash['payer_number'] = 'PayerNumber'
      @_hash['card_id'] = 'CardId'
      @_hash['pan'] = 'PAN'
      @_hash['panid'] = 'PANID'
      @_hash['card_expiry_date'] = 'CardExpiryDate'
      @_hash['action'] = 'Action'
      @_hash['from_date'] = 'FromDate'
      @_hash['to_date'] = 'ToDate'
      @_hash['caller'] = 'Caller'
      @_hash['notify_caller'] = 'NotifyCaller'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        col_co_code
        col_co_id
        account_id
        account_number
        payer_id
        payer_number
        card_id
        pan
        panid
        card_expiry_date
        from_date
        to_date
        caller
        notify_caller
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        caller
      ]
    end

    def initialize(action = nil, col_co_code = SKIP, col_co_id = SKIP,
                   account_id = SKIP, account_number = SKIP, payer_id = SKIP,
                   payer_number = SKIP, card_id = SKIP, pan = SKIP,
                   panid = SKIP, card_expiry_date = SKIP, from_date = SKIP,
                   to_date = SKIP, caller = SKIP, notify_caller = SKIP)
      @col_co_code = col_co_code unless col_co_code == SKIP
      @col_co_id = col_co_id unless col_co_id == SKIP
      @account_id = account_id unless account_id == SKIP
      @account_number = account_number unless account_number == SKIP
      @payer_id = payer_id unless payer_id == SKIP
      @payer_number = payer_number unless payer_number == SKIP
      @card_id = card_id unless card_id == SKIP
      @pan = pan unless pan == SKIP
      @panid = panid unless panid == SKIP
      @card_expiry_date = card_expiry_date unless card_expiry_date == SKIP
      @action = action
      @from_date = from_date unless from_date == SKIP
      @to_date = to_date unless to_date == SKIP
      @caller = caller unless caller == SKIP
      @notify_caller = notify_caller unless notify_caller == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      action = hash.key?('Action') ? hash['Action'] : nil
      col_co_code = hash.key?('ColCoCode') ? hash['ColCoCode'] : SKIP
      col_co_id = hash.key?('ColCoId') ? hash['ColCoId'] : SKIP
      account_id = hash.key?('AccountId') ? hash['AccountId'] : SKIP
      account_number = hash.key?('AccountNumber') ? hash['AccountNumber'] : SKIP
      payer_id = hash.key?('PayerId') ? hash['PayerId'] : SKIP
      payer_number = hash.key?('PayerNumber') ? hash['PayerNumber'] : SKIP
      card_id = hash.key?('CardId') ? hash['CardId'] : SKIP
      pan = hash.key?('PAN') ? hash['PAN'] : SKIP
      panid = hash.key?('PANID') ? hash['PANID'] : SKIP
      card_expiry_date =
        hash.key?('CardExpiryDate') ? hash['CardExpiryDate'] : SKIP
      from_date = hash.key?('FromDate') ? hash['FromDate'] : SKIP
      to_date = hash.key?('ToDate') ? hash['ToDate'] : SKIP
      caller = hash.key?('Caller') ? hash['Caller'] : SKIP
      notify_caller = hash.key?('NotifyCaller') ? hash['NotifyCaller'] : SKIP

      # Create object from extracted values.
      ScheduleCardBlockCardsItems.new(action,
                                      col_co_code,
                                      col_co_id,
                                      account_id,
                                      account_number,
                                      payer_id,
                                      payer_number,
                                      card_id,
                                      pan,
                                      panid,
                                      card_expiry_date,
                                      from_date,
                                      to_date,
                                      caller,
                                      notify_caller)
    end
  end
end
