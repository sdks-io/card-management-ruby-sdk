# shell_card_management_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellCardManagementApIs
  # SearchCardRestrictionReq Model.
  class SearchCardRestrictionReq < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Collecting Company Id of the selected payer. 
    # Optional if ColCoCode is passed else Mandatory.
    # Example:
    # 1 for Philippines
    # 5 for UK
    # @return [Integer]
    attr_accessor :col_co_id

    # Collecting Company Code (Shell Code) of the selected payer. 
    # Mandatory for serviced OUs such as Romania, Latvia, Lithuania, Estonia,
    # Ukraine etc. It is optional for other countries if ColCoID is provided.
    # Example:
    # 86 for Philippines
    # 5 for UK
    # @return [Integer]
    attr_accessor :col_co_code

    # Payer Id (i.e. Customer Id of the Payment Customer) of the selected payer.
    # Optional if PayerNumber is passed else Mandatory
    # Example: 123456
    # @return [Integer]
    attr_accessor :payer_id

    # Payer Number of the selected payer.
    # Optional if PayerId is passed else Mandatory
    # Example: GB000000123
    # @return [String]
    attr_accessor :payer_number

    # Payer Number of the selected payer.
    # Optional if PayerId is passed else Mandatory
    # Example: GB000000123
    # @return [Accounts]
    attr_accessor :accounts

    # Identifier of the Card bundle
    # Optional if cards list is given, else mandatory.
    # This input is a search criterion, if given.
    # @return [String]
    attr_accessor :bundle_id

    # Identifier of the Card bundle
    # Optional if cards list is given, else mandatory.
    # This input is a search criterion, if given.
    # @return [SearchCardRestriction]
    attr_accessor :cards

    # True/False
    # Whether to include location restriction of the cards in the response.
    # Optional
    # Default ‘false’
    # @return [TrueClass | FalseClass]
    attr_accessor :include_location_restrictions

    # Default value is False,
    # When the value is True, API will return bundle Id associated with cards in
    # the response, if available. 
    # Note: Use ‘Null’ or ‘False’ for optimum performance. A delay in response
    # is expected when set to ‘True’.
    # @return [TrueClass | FalseClass]
    attr_accessor :include_bundle_details

    # Default value is True,
    # When True: service will return the inherited values for the usage limits
    # (from card-program or account as available) when it is not overridden on
    # the card.
    # @return [TrueClass | FalseClass]
    attr_accessor :include_inherited_limits

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['col_co_id'] = 'ColCoId'
      @_hash['col_co_code'] = 'ColCoCode'
      @_hash['payer_id'] = 'PayerId'
      @_hash['payer_number'] = 'PayerNumber'
      @_hash['accounts'] = 'Accounts'
      @_hash['bundle_id'] = 'BundleId'
      @_hash['cards'] = 'Cards'
      @_hash['include_location_restrictions'] = 'IncludeLocationRestrictions'
      @_hash['include_bundle_details'] = 'IncludeBundleDetails'
      @_hash['include_inherited_limits'] = 'IncludeInheritedLimits'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        col_co_id
        col_co_code
        payer_id
        payer_number
        accounts
        bundle_id
        cards
        include_location_restrictions
        include_bundle_details
        include_inherited_limits
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        col_co_id
        col_co_code
        payer_id
        bundle_id
        include_location_restrictions
        include_bundle_details
        include_inherited_limits
      ]
    end

    def initialize(col_co_id = SKIP, col_co_code = SKIP, payer_id = SKIP,
                   payer_number = SKIP, accounts = SKIP, bundle_id = SKIP,
                   cards = SKIP, include_location_restrictions = SKIP,
                   include_bundle_details = SKIP,
                   include_inherited_limits = SKIP)
      @col_co_id = col_co_id unless col_co_id == SKIP
      @col_co_code = col_co_code unless col_co_code == SKIP
      @payer_id = payer_id unless payer_id == SKIP
      @payer_number = payer_number unless payer_number == SKIP
      @accounts = accounts unless accounts == SKIP
      @bundle_id = bundle_id unless bundle_id == SKIP
      @cards = cards unless cards == SKIP
      unless include_location_restrictions == SKIP
        @include_location_restrictions =
          include_location_restrictions
      end
      @include_bundle_details = include_bundle_details unless include_bundle_details == SKIP
      @include_inherited_limits = include_inherited_limits unless include_inherited_limits == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      col_co_id = hash.key?('ColCoId') ? hash['ColCoId'] : SKIP
      col_co_code = hash.key?('ColCoCode') ? hash['ColCoCode'] : SKIP
      payer_id = hash.key?('PayerId') ? hash['PayerId'] : SKIP
      payer_number = hash.key?('PayerNumber') ? hash['PayerNumber'] : SKIP
      accounts = Accounts.from_hash(hash['Accounts']) if hash['Accounts']
      bundle_id = hash.key?('BundleId') ? hash['BundleId'] : SKIP
      cards = SearchCardRestriction.from_hash(hash['Cards']) if hash['Cards']
      include_location_restrictions =
        hash.key?('IncludeLocationRestrictions') ? hash['IncludeLocationRestrictions'] : SKIP
      include_bundle_details =
        hash.key?('IncludeBundleDetails') ? hash['IncludeBundleDetails'] : SKIP
      include_inherited_limits =
        hash.key?('IncludeInheritedLimits') ? hash['IncludeInheritedLimits'] : SKIP

      # Create object from extracted values.
      SearchCardRestrictionReq.new(col_co_id,
                                   col_co_code,
                                   payer_id,
                                   payer_number,
                                   accounts,
                                   bundle_id,
                                   cards,
                                   include_location_restrictions,
                                   include_bundle_details,
                                   include_inherited_limits)
    end
  end
end
