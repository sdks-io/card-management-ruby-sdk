# shell_card_management_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellCardManagementApIs
  # ProductGroup Model.
  class ProductGroup < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Referenced Purchase Category Id
    # Example: 123, 124
    # @return [Integer]
    attr_accessor :reference_id

    # Product group ID
    # @return [String]
    attr_accessor :product_group_id

    # Product group name
    # @return [String]
    attr_accessor :name

    # Indicates whether this is a default Product Group at ColCo level or not.
    # Note: The Customer level default settings are not considered here.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_default

    # Identifies the type of Product group.
    # true - if it is a Fuel type Product group 
    # false - if it is Non-Fuel type
    # @return [TrueClass | FalseClass]
    attr_accessor :is_fuel_type

    # Identifies the type of Product group.
    # true - if it is a Fuel type Product group 
    # false - if it is Non-Fuel type
    # @return [Array[ProductAllOf0]]
    attr_accessor :products

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['reference_id'] = 'ReferenceId'
      @_hash['product_group_id'] = 'ProductGroupId'
      @_hash['name'] = 'Name'
      @_hash['is_default'] = 'IsDefault'
      @_hash['is_fuel_type'] = 'IsFuelType'
      @_hash['products'] = 'Products'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        reference_id
        product_group_id
        name
        is_default
        is_fuel_type
        products
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(reference_id = SKIP, product_group_id = SKIP, name = SKIP,
                   is_default = SKIP, is_fuel_type = SKIP, products = SKIP)
      @reference_id = reference_id unless reference_id == SKIP
      @product_group_id = product_group_id unless product_group_id == SKIP
      @name = name unless name == SKIP
      @is_default = is_default unless is_default == SKIP
      @is_fuel_type = is_fuel_type unless is_fuel_type == SKIP
      @products = products unless products == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      reference_id = hash.key?('ReferenceId') ? hash['ReferenceId'] : SKIP
      product_group_id =
        hash.key?('ProductGroupId') ? hash['ProductGroupId'] : SKIP
      name = hash.key?('Name') ? hash['Name'] : SKIP
      is_default = hash.key?('IsDefault') ? hash['IsDefault'] : SKIP
      is_fuel_type = hash.key?('IsFuelType') ? hash['IsFuelType'] : SKIP
      # Parameter is an array, so we need to iterate through it
      products = nil
      unless hash['Products'].nil?
        products = []
        hash['Products'].each do |structure|
          products << (ProductAllOf0.from_hash(structure) if structure)
        end
      end

      products = SKIP unless hash.key?('Products')

      # Create object from extracted values.
      ProductGroup.new(reference_id,
                       product_group_id,
                       name,
                       is_default,
                       is_fuel_type,
                       products)
    end
  end
end
