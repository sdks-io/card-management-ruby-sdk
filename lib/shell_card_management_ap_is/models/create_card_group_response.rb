# shell_card_management_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellCardManagementApIs
  # CreateCardGroupResponse Model.
  class CreateCardGroupResponse < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Reference number for tracking the execution of the requests â€“ new Card
    # Group creation and to move the cards to the new card group.
    # Reference number will be null when the validations of new card group
    # parameters fail.
    # @return [Integer]
    attr_accessor :main_reference

    # Reference number for tracking the execution of card group creation. 
    # Reference number will be null when the validations of new card group
    # parameters fail.
    # @return [Integer]
    attr_accessor :new_card_group_reference

    # List of cards validated and submitted successfully for processing.
    # @return [Array[CreateCardGroupResponseSuccessfulRequestsItems]]
    attr_accessor :successful_requests

    # List of cards that failed validation and not submitted for processing.
    # Entity: FailedCardReference
    # This list will be empty when the validations of new card group parameters
    # fail.
    # @return [Array[CreateCardGroupResponseErrorCardsItems]]
    attr_accessor :error_cards

    # List of cards that failed validation and not submitted for processing.
    # Entity: FailedCardReference
    # This list will be empty when the validations of new card group parameters
    # fail.
    # @return [ErrorStatus]
    attr_accessor :error

    # API Request Id
    # @return [String]
    attr_accessor :request_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['main_reference'] = 'MainReference'
      @_hash['new_card_group_reference'] = 'NewCardGroupReference'
      @_hash['successful_requests'] = 'SuccessfulRequests'
      @_hash['error_cards'] = 'ErrorCards'
      @_hash['error'] = 'Error'
      @_hash['request_id'] = 'RequestId'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        main_reference
        new_card_group_reference
        successful_requests
        error_cards
        error
        request_id
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(main_reference = SKIP, new_card_group_reference = SKIP,
                   successful_requests = SKIP, error_cards = SKIP, error = SKIP,
                   request_id = SKIP)
      @main_reference = main_reference unless main_reference == SKIP
      @new_card_group_reference = new_card_group_reference unless new_card_group_reference == SKIP
      @successful_requests = successful_requests unless successful_requests == SKIP
      @error_cards = error_cards unless error_cards == SKIP
      @error = error unless error == SKIP
      @request_id = request_id unless request_id == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      main_reference = hash.key?('MainReference') ? hash['MainReference'] : SKIP
      new_card_group_reference =
        hash.key?('NewCardGroupReference') ? hash['NewCardGroupReference'] : SKIP
      # Parameter is an array, so we need to iterate through it
      successful_requests = nil
      unless hash['SuccessfulRequests'].nil?
        successful_requests = []
        hash['SuccessfulRequests'].each do |structure|
          successful_requests << (CreateCardGroupResponseSuccessfulRequestsItems.from_hash(structure) if structure)
        end
      end

      successful_requests = SKIP unless hash.key?('SuccessfulRequests')
      # Parameter is an array, so we need to iterate through it
      error_cards = nil
      unless hash['ErrorCards'].nil?
        error_cards = []
        hash['ErrorCards'].each do |structure|
          error_cards << (CreateCardGroupResponseErrorCardsItems.from_hash(structure) if structure)
        end
      end

      error_cards = SKIP unless hash.key?('ErrorCards')
      error = ErrorStatus.from_hash(hash['Error']) if hash['Error']
      request_id = hash.key?('RequestId') ? hash['RequestId'] : SKIP

      # Create object from extracted values.
      CreateCardGroupResponse.new(main_reference,
                                  new_card_group_reference,
                                  successful_requests,
                                  error_cards,
                                  error,
                                  request_id)
    end
  end
end
