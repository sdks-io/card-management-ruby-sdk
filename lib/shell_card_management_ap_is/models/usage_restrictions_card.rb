# shell_card_management_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellCardManagementApIs
  # UsageRestrictionsCard Model.
  class UsageRestrictionsCard < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Maximum spend value (amount) allowed per day.
    # Optional
    # It allows null in the input field. If Values is passed as null, apply the
    # card type limit. However, if the card type limit is NULL for the same
    # field then No limit will be applied in Gateway.
    # @return [Float]
    attr_accessor :daily_spend

    # Maximum spend value (amount) allowed per week. 
    # Optional
    # @return [Float]
    attr_accessor :weekly_spend

    # Maximum spend value (amount) allowed per month. 
    # Optional
    # @return [Float]
    attr_accessor :monthly_spend

    # Maximum spend value (amount) allowed per transaction. 
    # Optional
    # @return [Float]
    attr_accessor :per_transaction_spend

    # Maximum spend value (amount) allowed per annum. 
    # Optional
    # @return [Float]
    attr_accessor :annual_spend

    # Maximum spend value (amount) allowed in card’s life time. 
    # Optional
    # @return [Float]
    attr_accessor :life_time_spend

    # Maximum volume (quantity) allowed per day. 
    # Optional
    # @return [Float]
    attr_accessor :daily_volume

    # Maximum volume (quantity) allowed per week. 
    # Optional
    # @return [Float]
    attr_accessor :weekly_volume

    # Maximum volume (quantity) allowed per month. 
    # Optional
    # @return [Float]
    attr_accessor :monthly_volume

    # Maximum volume (quantity) allowed per transaction. 
    # Optional
    # @return [Float]
    attr_accessor :per_transaction_volume

    # Maximum volume (quantity) allowed per annum. 
    # Optional
    # @return [Float]
    attr_accessor :annual_volume

    # Maximum volume (quantity) allowed in card’s life time. 
    # Optional
    # @return [Float]
    attr_accessor :life_time_volume

    # Maximum number of transactions allowed per day. 
    # Optional
    # @return [Float]
    attr_accessor :daily_transaction_count

    # Maximum number of transactions allowed per week. 
    # Optional
    # @return [Float]
    attr_accessor :weekly_transaction_count

    # Maximum number of transactions allowed per month. 
    # Optional.
    # @return [Float]
    attr_accessor :monthly_transaction_count

    # Maximum number of transactions allowed per annum.
    # @return [Float]
    attr_accessor :annual_transaction_count

    # Maximum number of transactions allowed in card’s lifetime. 
    # Optional
    # @return [Float]
    attr_accessor :life_time_transaction_count

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['daily_spend'] = 'DailySpend'
      @_hash['weekly_spend'] = 'WeeklySpend'
      @_hash['monthly_spend'] = 'MonthlySpend'
      @_hash['per_transaction_spend'] = 'PerTransactionSpend'
      @_hash['annual_spend'] = 'AnnualSpend'
      @_hash['life_time_spend'] = 'LifeTimeSpend'
      @_hash['daily_volume'] = 'DailyVolume'
      @_hash['weekly_volume'] = 'WeeklyVolume'
      @_hash['monthly_volume'] = 'MonthlyVolume'
      @_hash['per_transaction_volume'] = 'PerTransactionVolume'
      @_hash['annual_volume'] = 'AnnualVolume'
      @_hash['life_time_volume'] = 'LifeTimeVolume'
      @_hash['daily_transaction_count'] = 'DailyTransactionCount'
      @_hash['weekly_transaction_count'] = 'WeeklyTransactionCount'
      @_hash['monthly_transaction_count'] = 'MonthlyTransactionCount'
      @_hash['annual_transaction_count'] = 'AnnualTransactionCount'
      @_hash['life_time_transaction_count'] = 'LifeTimeTransactionCount'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        daily_spend
        weekly_spend
        monthly_spend
        per_transaction_spend
        annual_spend
        life_time_spend
        daily_volume
        weekly_volume
        monthly_volume
        per_transaction_volume
        annual_volume
        life_time_volume
        daily_transaction_count
        weekly_transaction_count
        monthly_transaction_count
        annual_transaction_count
        life_time_transaction_count
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        daily_spend
        weekly_spend
        monthly_spend
        per_transaction_spend
        annual_spend
        life_time_spend
        daily_volume
        weekly_volume
        monthly_volume
        annual_volume
        daily_transaction_count
        weekly_transaction_count
        monthly_transaction_count
        annual_transaction_count
        life_time_transaction_count
      ]
    end

    def initialize(daily_spend = SKIP, weekly_spend = SKIP,
                   monthly_spend = SKIP, per_transaction_spend = SKIP,
                   annual_spend = SKIP, life_time_spend = SKIP,
                   daily_volume = SKIP, weekly_volume = SKIP,
                   monthly_volume = SKIP, per_transaction_volume = SKIP,
                   annual_volume = SKIP, life_time_volume = SKIP,
                   daily_transaction_count = SKIP,
                   weekly_transaction_count = SKIP,
                   monthly_transaction_count = SKIP,
                   annual_transaction_count = SKIP,
                   life_time_transaction_count = SKIP)
      @daily_spend = daily_spend unless daily_spend == SKIP
      @weekly_spend = weekly_spend unless weekly_spend == SKIP
      @monthly_spend = monthly_spend unless monthly_spend == SKIP
      @per_transaction_spend = per_transaction_spend unless per_transaction_spend == SKIP
      @annual_spend = annual_spend unless annual_spend == SKIP
      @life_time_spend = life_time_spend unless life_time_spend == SKIP
      @daily_volume = daily_volume unless daily_volume == SKIP
      @weekly_volume = weekly_volume unless weekly_volume == SKIP
      @monthly_volume = monthly_volume unless monthly_volume == SKIP
      @per_transaction_volume = per_transaction_volume unless per_transaction_volume == SKIP
      @annual_volume = annual_volume unless annual_volume == SKIP
      @life_time_volume = life_time_volume unless life_time_volume == SKIP
      @daily_transaction_count = daily_transaction_count unless daily_transaction_count == SKIP
      @weekly_transaction_count = weekly_transaction_count unless weekly_transaction_count == SKIP
      unless monthly_transaction_count == SKIP
        @monthly_transaction_count =
          monthly_transaction_count
      end
      @annual_transaction_count = annual_transaction_count unless annual_transaction_count == SKIP
      unless life_time_transaction_count == SKIP
        @life_time_transaction_count =
          life_time_transaction_count
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      daily_spend = hash.key?('DailySpend') ? hash['DailySpend'] : SKIP
      weekly_spend = hash.key?('WeeklySpend') ? hash['WeeklySpend'] : SKIP
      monthly_spend = hash.key?('MonthlySpend') ? hash['MonthlySpend'] : SKIP
      per_transaction_spend =
        hash.key?('PerTransactionSpend') ? hash['PerTransactionSpend'] : SKIP
      annual_spend = hash.key?('AnnualSpend') ? hash['AnnualSpend'] : SKIP
      life_time_spend =
        hash.key?('LifeTimeSpend') ? hash['LifeTimeSpend'] : SKIP
      daily_volume = hash.key?('DailyVolume') ? hash['DailyVolume'] : SKIP
      weekly_volume = hash.key?('WeeklyVolume') ? hash['WeeklyVolume'] : SKIP
      monthly_volume = hash.key?('MonthlyVolume') ? hash['MonthlyVolume'] : SKIP
      per_transaction_volume =
        hash.key?('PerTransactionVolume') ? hash['PerTransactionVolume'] : SKIP
      annual_volume = hash.key?('AnnualVolume') ? hash['AnnualVolume'] : SKIP
      life_time_volume =
        hash.key?('LifeTimeVolume') ? hash['LifeTimeVolume'] : SKIP
      daily_transaction_count =
        hash.key?('DailyTransactionCount') ? hash['DailyTransactionCount'] : SKIP
      weekly_transaction_count =
        hash.key?('WeeklyTransactionCount') ? hash['WeeklyTransactionCount'] : SKIP
      monthly_transaction_count =
        hash.key?('MonthlyTransactionCount') ? hash['MonthlyTransactionCount'] : SKIP
      annual_transaction_count =
        hash.key?('AnnualTransactionCount') ? hash['AnnualTransactionCount'] : SKIP
      life_time_transaction_count =
        hash.key?('LifeTimeTransactionCount') ? hash['LifeTimeTransactionCount'] : SKIP

      # Create object from extracted values.
      UsageRestrictionsCard.new(daily_spend,
                                weekly_spend,
                                monthly_spend,
                                per_transaction_spend,
                                annual_spend,
                                life_time_spend,
                                daily_volume,
                                weekly_volume,
                                monthly_volume,
                                per_transaction_volume,
                                annual_volume,
                                life_time_volume,
                                daily_transaction_count,
                                weekly_transaction_count,
                                monthly_transaction_count,
                                annual_transaction_count,
                                life_time_transaction_count)
    end
  end
end
