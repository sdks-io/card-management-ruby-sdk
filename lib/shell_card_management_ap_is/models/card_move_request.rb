# shell_card_management_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellCardManagementApIs
  # CardMoveRequest Model.
  class CardMoveRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :col_co_code

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :col_co_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :col_co_country_code

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :payer_number

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :payer_id

    # TODO: Write general description for this method
    # @return [Array[CardMoveRequestCardsItems]]
    attr_accessor :cards

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :target_account_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :target_account_number

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :target_card_group_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :target_new_card_group_name

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['col_co_code'] = 'ColCoCode'
      @_hash['col_co_id'] = 'ColCoId'
      @_hash['col_co_country_code'] = 'ColCoCountryCode'
      @_hash['payer_number'] = 'PayerNumber'
      @_hash['payer_id'] = 'PayerId'
      @_hash['cards'] = 'Cards'
      @_hash['target_account_id'] = 'TargetAccountId'
      @_hash['target_account_number'] = 'TargetAccountNumber'
      @_hash['target_card_group_id'] = 'TargetCardGroupId'
      @_hash['target_new_card_group_name'] = 'TargetNewCardGroupName'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        col_co_code
        col_co_id
        col_co_country_code
        payer_number
        payer_id
        cards
        target_account_id
        target_account_number
        target_card_group_id
        target_new_card_group_name
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        col_co_code
        col_co_id
        col_co_country_code
        payer_number
        payer_id
      ]
    end

    def initialize(col_co_code = SKIP,
                   col_co_id = SKIP,
                   col_co_country_code = SKIP,
                   payer_number = SKIP,
                   payer_id = SKIP,
                   cards = SKIP,
                   target_account_id = SKIP,
                   target_account_number = SKIP,
                   target_card_group_id = SKIP,
                   target_new_card_group_name = SKIP)
      @col_co_code = col_co_code unless col_co_code == SKIP
      @col_co_id = col_co_id unless col_co_id == SKIP
      @col_co_country_code = col_co_country_code unless col_co_country_code == SKIP
      @payer_number = payer_number unless payer_number == SKIP
      @payer_id = payer_id unless payer_id == SKIP
      @cards = cards unless cards == SKIP
      @target_account_id = target_account_id unless target_account_id == SKIP
      @target_account_number = target_account_number unless target_account_number == SKIP
      @target_card_group_id = target_card_group_id unless target_card_group_id == SKIP
      unless target_new_card_group_name == SKIP
        @target_new_card_group_name =
          target_new_card_group_name
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      col_co_code = hash.key?('ColCoCode') ? hash['ColCoCode'] : SKIP
      col_co_id = hash.key?('ColCoId') ? hash['ColCoId'] : SKIP
      col_co_country_code =
        hash.key?('ColCoCountryCode') ? hash['ColCoCountryCode'] : SKIP
      payer_number = hash.key?('PayerNumber') ? hash['PayerNumber'] : SKIP
      payer_id = hash.key?('PayerId') ? hash['PayerId'] : SKIP
      # Parameter is an array, so we need to iterate through it
      cards = nil
      unless hash['Cards'].nil?
        cards = []
        hash['Cards'].each do |structure|
          cards << (CardMoveRequestCardsItems.from_hash(structure) if structure)
        end
      end

      cards = SKIP unless hash.key?('Cards')
      target_account_id =
        hash.key?('TargetAccountId') ? hash['TargetAccountId'] : SKIP
      target_account_number =
        hash.key?('TargetAccountNumber') ? hash['TargetAccountNumber'] : SKIP
      target_card_group_id =
        hash.key?('TargetCardGroupId') ? hash['TargetCardGroupId'] : SKIP
      target_new_card_group_name =
        hash.key?('TargetNewCardGroupName') ? hash['TargetNewCardGroupName'] : SKIP

      # Create object from extracted values.
      CardMoveRequest.new(col_co_code,
                          col_co_id,
                          col_co_country_code,
                          payer_number,
                          payer_id,
                          cards,
                          target_account_id,
                          target_account_number,
                          target_card_group_id,
                          target_new_card_group_name)
    end
  end
end
