# shell_card_management_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellCardManagementApIs
  # RestrictionCardRequestCardsItems Model.
  class RestrictionCardRequestCardsItems < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Account Number of the customer. 
    # Optional if AccountId is passed, else Mandatory.
    # This input is a search criterion, if given.
    # Example: GB000000123
    # @return [String]
    attr_accessor :account_number

    # Account ID of the customer.
    # Optional if AccountNumber is passed, else Mandatory. 
    # This input is a search criterion, if given.
    # Example: 123456
    # @return [Integer]
    attr_accessor :account_id

    # Card PAN.
    # Optional if CardId is given, else mandatory. 
    # Example: 7002051006629890645 
    # Note: 
    # •	PAN is ignored if CardId is given.
    # When PAN matches with multiple cards, the restriction will be applied on
    # the latest issued card.
    # @return [String]
    attr_accessor :pan

    # Unique Card Id
    # Optional if PAN is given, else mandatory.
    # Example: 275549
    # @return [Integer]
    attr_accessor :card_id

    # True/False.
    # If true, the usage restrictions applied on the card in Gateway will be
    # reset to Customer Card Type level max limits, if there are no customer
    # level overrides available then OU card type max limits. Else, the card
    # restrictions will be updated with the usage restrictions provided in the
    # API.
    # @return [TrueClass | FalseClass]
    attr_accessor :reset_usage_restrictions

    # True/False.
    # If true, the Day/Time restrictions applied on the card will be deleted.
    # Else, the card restrictions will be updated with the day/time restrictions
    # provided in the API.
    # @return [TrueClass | FalseClass]
    attr_accessor :reset_day_time_restrictions

    # True/False.
    # If true, Default fuel/non-fuel sets configured at the purchase category
    # level will be applied to the card. Else, the card will be applied with
    # product restrictions provided in the API.
    # @return [TrueClass | FalseClass]
    attr_accessor :reset_product_restrictions

    # True/False.
    # If true, the location restrictions applied on the card will be deleted.
    # Else, the card restrictions will be updated with the location restrictions
    # provided in the API.
    # @return [TrueClass | FalseClass]
    attr_accessor :reset_location_restrictions

    # Day/time restrictions such as weekdays and time range to be applied on the
    # bundle.
    # Mandatory if respective action is set as “Add”.
    # The details of DayTimeRestriction entity is given below.
    # @return [DayTimeRestrictions]
    attr_accessor :day_time_restrictions

    # Location restrictions to be applied on the bundle which either allows or
    # restricts using the cards, which are under the bundle, in the specified
    # locations. 
    # Mandatory if respective action is set as “Add”.
    # Details of location restrictions are given below.
    # @return [LocationRestrictions]
    attr_accessor :location_restrictions

    # Location restrictions to be applied on the bundle which either allows or
    # restricts using the cards, which are under the bundle, in the specified
    # locations. 
    # Mandatory if respective action is set as “Add”.
    # Details of location restrictions are given below.
    # @return [ProductRestrictions]
    attr_accessor :product_restrictions

    # Location restrictions to be applied on the bundle which either allows or
    # restricts using the cards, which are under the bundle, in the specified
    # locations. 
    # Mandatory if respective action is set as “Add”.
    # Details of location restrictions are given below.
    # @return [UsageRestrictions]
    attr_accessor :usage_restrictions

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['account_number'] = 'AccountNumber'
      @_hash['account_id'] = 'AccountId'
      @_hash['pan'] = 'PAN'
      @_hash['card_id'] = 'CardId'
      @_hash['reset_usage_restrictions'] = 'ResetUsageRestrictions'
      @_hash['reset_day_time_restrictions'] = 'ResetDayTimeRestrictions'
      @_hash['reset_product_restrictions'] = 'ResetProductRestrictions'
      @_hash['reset_location_restrictions'] = 'ResetLocationRestrictions'
      @_hash['day_time_restrictions'] = 'DayTimeRestrictions'
      @_hash['location_restrictions'] = 'LocationRestrictions'
      @_hash['product_restrictions'] = 'ProductRestrictions'
      @_hash['usage_restrictions'] = 'UsageRestrictions'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        account_number
        account_id
        pan
        card_id
        reset_usage_restrictions
        reset_day_time_restrictions
        reset_product_restrictions
        reset_location_restrictions
        day_time_restrictions
        location_restrictions
        product_restrictions
        usage_restrictions
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(account_number = SKIP,
                   account_id = SKIP,
                   pan = SKIP,
                   card_id = SKIP,
                   reset_usage_restrictions = SKIP,
                   reset_day_time_restrictions = SKIP,
                   reset_product_restrictions = SKIP,
                   reset_location_restrictions = SKIP,
                   day_time_restrictions = SKIP,
                   location_restrictions = SKIP,
                   product_restrictions = SKIP,
                   usage_restrictions = SKIP)
      @account_number = account_number unless account_number == SKIP
      @account_id = account_id unless account_id == SKIP
      @pan = pan unless pan == SKIP
      @card_id = card_id unless card_id == SKIP
      @reset_usage_restrictions = reset_usage_restrictions unless reset_usage_restrictions == SKIP
      unless reset_day_time_restrictions == SKIP
        @reset_day_time_restrictions =
          reset_day_time_restrictions
      end
      unless reset_product_restrictions == SKIP
        @reset_product_restrictions =
          reset_product_restrictions
      end
      unless reset_location_restrictions == SKIP
        @reset_location_restrictions =
          reset_location_restrictions
      end
      @day_time_restrictions = day_time_restrictions unless day_time_restrictions == SKIP
      @location_restrictions = location_restrictions unless location_restrictions == SKIP
      @product_restrictions = product_restrictions unless product_restrictions == SKIP
      @usage_restrictions = usage_restrictions unless usage_restrictions == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      account_number = hash.key?('AccountNumber') ? hash['AccountNumber'] : SKIP
      account_id = hash.key?('AccountId') ? hash['AccountId'] : SKIP
      pan = hash.key?('PAN') ? hash['PAN'] : SKIP
      card_id = hash.key?('CardId') ? hash['CardId'] : SKIP
      reset_usage_restrictions =
        hash.key?('ResetUsageRestrictions') ? hash['ResetUsageRestrictions'] : SKIP
      reset_day_time_restrictions =
        hash.key?('ResetDayTimeRestrictions') ? hash['ResetDayTimeRestrictions'] : SKIP
      reset_product_restrictions =
        hash.key?('ResetProductRestrictions') ? hash['ResetProductRestrictions'] : SKIP
      reset_location_restrictions =
        hash.key?('ResetLocationRestrictions') ? hash['ResetLocationRestrictions'] : SKIP
      day_time_restrictions = DayTimeRestrictions.from_hash(hash['DayTimeRestrictions']) if
        hash['DayTimeRestrictions']
      location_restrictions = LocationRestrictions.from_hash(hash['LocationRestrictions']) if
        hash['LocationRestrictions']
      product_restrictions = ProductRestrictions.from_hash(hash['ProductRestrictions']) if
        hash['ProductRestrictions']
      usage_restrictions = UsageRestrictions.from_hash(hash['UsageRestrictions']) if
        hash['UsageRestrictions']

      # Create object from extracted values.
      RestrictionCardRequestCardsItems.new(account_number,
                                           account_id,
                                           pan,
                                           card_id,
                                           reset_usage_restrictions,
                                           reset_day_time_restrictions,
                                           reset_product_restrictions,
                                           reset_location_restrictions,
                                           day_time_restrictions,
                                           location_restrictions,
                                           product_restrictions,
                                           usage_restrictions)
    end
  end
end
