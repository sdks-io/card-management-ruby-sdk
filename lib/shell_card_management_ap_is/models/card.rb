# shell_card_management_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellCardManagementApIs
  # Card Model.
  class Card < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Account ID
    # @return [Integer]
    attr_accessor :account_id

    # Account Name
    # @return [String]
    attr_accessor :account_name

    # Account Number
    # @return [String]
    attr_accessor :account_number

    # Account Short Name
    # @return [String]
    attr_accessor :account_short_name

    # Bundle Id associated with card in the Gateway.<br />
    #  This field will have null value if the card is not associated with any
    # bundle in Gateway or the value of IncludeBundleDetails in request is
    # false.
    # @return [String]
    attr_accessor :bundle_id

    # List of Scheduled Card Blocks details<br />
    # Entity: CardBlockSchedule
    # @return [Array[CardBlockSchedule]]
    attr_accessor :card_block_schedules

    # Card group ID
    # @return [Integer]
    attr_accessor :card_group_id

    # Card group name
    # @return [String]
    attr_accessor :card_group_name

    # Unique Card Id
    # @return [Integer]
    attr_accessor :card_id

    # ISO code of the card i.e. first 7 digits of the PAN
    # @return [String]
    attr_accessor :card_type_code

    # Card Type ID Example Id and Description: 1 -Philippines CRT 7077861
    # 2-Philippines<br />
    # Fleet 7002861 5-SHELL FLEET-HONG KONG 7002821 6-SHELL NHF- HONG KONG
    # 7002821 7-SHELL CRT- HONG KONG 7077821
    # @return [Integer]
    attr_accessor :card_type_id

    # Card Type Name Example Id and Description: 1-Philippines CRT 7077861
    # 2-Philippines <br />
    # Fleet 7002861 5-SHELL FLEET- HONG KONG 7002821 6-SHELL NHF- HONG KONG
    # 7002821 7-SHELL  CRT- HONG KONG 7077821
    # @return [String]
    attr_accessor :card_type_name

    # The 2 character ISO Code for the customer and card owning country. <br />
    # If default card type is not set then the first two alphabets of the
    # account ID is returned.
    # @return [String]
    attr_accessor :col_co_country_code

    # Card Creation datetime.<br />
    # Format: yyyyMMdd HH:mm:ss<br />
    # Note: Clients to convert this to appropriate DateTime type.
    # @return [String]
    attr_accessor :creation_date

    # Driver name
    # @return [String]
    attr_accessor :driver_name

    # Effective date for the Card<br />
    # Format: yyyyMMdd<br />
    # Note: Clients to convert this to appropriate DateTime type.
    # @return [String]
    attr_accessor :effective_date

    # Expiry date of the card.<br />
    # Format: yyyyMMdd<br />
    # Note: Clients to convert this to appropriate DateTime type.
    # @return [String]
    attr_accessor :expiry_date

    # True/False True if fleet id input is enabled, else false
    # @return [TrueClass | FalseClass]
    attr_accessor :fleet_id_input

    # True/False True if it is a CRT type card, else false
    # @return [TrueClass | FalseClass]
    attr_accessor :is_crt

    # True/False True if it is a Fleet type card, else false
    # @return [TrueClass | FalseClass]
    attr_accessor :is_fleet

    # True/False True if it is an international card, else false
    # @return [TrueClass | FalseClass]
    attr_accessor :is_international

    # True/False True if it is a national card, else false
    # @return [TrueClass | FalseClass]
    attr_accessor :is_national

    # True/False True if it is allowed at all partner sites, else false
    # @return [TrueClass | FalseClass]
    attr_accessor :is_partner_sites_included

    # True/False True if it is only allowed at Shell sites, else false
    # @return [TrueClass | FalseClass]
    attr_accessor :is_shell_sites_only

    # Issue date<br />
    # Format: yyyyMMdd<br />
    # Note: Clients to convert this to appropriate DateTime type.
    # @return [String]
    attr_accessor :issue_date

    # True/False True if a new card is issued with the same PAN, else false.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_superseded

    # True/False True if it is a virtual card, else false
    # @return [TrueClass | FalseClass]
    attr_accessor :is_virtual_card

    # Card last modified date and time<br />
    # Format: yyyyMMdd HH:mm:ss<br />
    # Note: Clients to convert this to appropriate DateTime type.
    # @return [String]
    attr_accessor :last_modified_date

    # Card last used date .<br />
    # Note: last used date of a card will be calculated based on billed/unbilled
    # sales items
    #       of a given card.The query that extracts the last used dates will be
    # applied on the
    #       subset of the cards being returned to the client.Unbilled sales
    # items is checked
    #       first and for those not found in the unbilled table, sales items
    # will be checked
    #       (only when the last used date is not found in unbilled table for at
    # least a single
    #       card from the result). The transactions in last 48 hours are not
    # expected to be
    # Therefore this field gives the correct information up to 48 hours
    # early.<br />
    # Format: yyyyMMdd HH:mm:ss<br />
    # Note: Clients to convert this to appropriate DateTime type
    # @return [String]
    attr_accessor :last_used_date

    # ISO code of the local currency. <br />
    # @return [String]
    attr_accessor :local_currency_code

    # Local currency symbol. <br />
    # @return [String]
    attr_accessor :local_currency_symbol

    # True/False True if odometer input is enabled on the card, else false
    # @return [TrueClass | FalseClass]
    attr_accessor :odometer_input

    # Card PAN Mask PAN (Mask all digits except the Last 6 digits of the PAN)
    # @return [String]
    attr_accessor :pan

    # Purchase category code
    # @return [String]
    attr_accessor :purchase_category_code

    # Purchase category Id <br />
    # Note: Not Purchase code.
    # @return [Integer]
    attr_accessor :purchase_category_id

    # Purchase category name
    # @return [String]
    attr_accessor :purchase_category_name

    # Card Status reason Example: Lost Stolen Card no longer required
    # @return [String]
    attr_accessor :reason

    # Reissue setting of the card. If the card is superseded (i.e. a
    # replacement/new card is issued) then reissue setting of the latest card
    # issued. <br />
    # Values<br />
    # •True –Card will be Reissued when nearing its expiry date <br />
    # •False –Card will not be Reissued
    # @return [String]
    attr_accessor :reissue_setting

    # Status Description (Active, Temporarily Blocked, etc.,)<br />
    # Possible Ids and description: 1 Active 7 Blocked Card 8 Expired 9
    # Cancelled 10 New 23 Pending Renewal 31 Replaced 41<br />
    # Temporary Block(Customer) 42 Temporary Block(Shell) 43 Fraud 101
    # Active(Block in progress)<br />
    # * 102 Blocked Card(Unblock in progress) <br />
    # * 103 Active(Cancel in progress) <br />
    # * 104 Active(Marked as damaged)<br />
    # * 105 New(Cancel in progress) <br />
    # * 106 { Status}(Scheduled for block)<br />
    # * 107 { Status}(Scheduled for unblock) <br />
    # *# Note: Items marked with* are intermediate statuses  to indicate that
    # there are pending requests in progress.<br />
    # The response can contain these intermediate statuses only if the<br />
    # IncludeIntermediateStatus flag is true. The placeholder { Status} in the
    # items<br />
    # marked with # will be replaced with the  status description. E.g., Active
    # (Scheduled for block)
    # @return [String]
    attr_accessor :status_description

    # Card Status id Possible Ids and description: 1 Active 7 Blocked Card 8
    # Expired 9 Cancelled 10 New 23 Pending Renewal 31 Replaced 41 Temporary
    # Block(Customer) 42 <br />
    # Temporary Block(Shell) 43 Fraud 101 Active(Block in progress) <br />
    # * 102 Blocked Card(Unblock in progress)<br />
    # * 103 Active(Cancel in progress) <br />
    # * 104 Active(Marked as damaged) <br />
    # * 105 New(Cancel in progress)<br />
    # * 106 { Status}(Scheduled for block) <br />
    # # 107 {Status}(Scheduled for unblock)<br />
    # *# Note: Items marked with* are intermediate statuses to indicate that
    # there are pending requests in progress.<br />
    # The response can contain these intermediate statuses only if the
    # IncludeIntermediateStatus flag is true.<br />
    # The placeholder { Status} in the items marked with # will be replaced
    # with<br />
    # the status description. E.g., Active (Scheduled for block)
    # @return [Integer]
    attr_accessor :status_id

    # Token Type ID configured for the Card E.g. 107
    # @return [Integer]
    attr_accessor :token_type_id

    # Token Type Name configured for the Card
    # @return [String]
    attr_accessor :token_type_name

    # Vehicle registration number
    # @return [String]
    attr_accessor :vrn

    # Customer reference number of the card.
    # @return [String]
    attr_accessor :client_reference_id

    # Is Europay, MasterCard, and Visa Contact enabled or not.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_emv_contact

    # Is Europay, MasterCard, and Visa Contactless enabled or not.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_emv_contactless

    # Whether the card type is enabled for RFID (Radio Frequency Identification)
    # @return [TrueClass | FalseClass]
    attr_accessor :is_rfid

    # RFIDUID
    # @return [String]
    attr_accessor :rfiduid

    # EMAID
    # @return [String]
    attr_accessor :emaid

    # EV Printed Number
    # @return [String]
    attr_accessor :ev_printed_number

    # Card Media Code.
    # @return [String]
    attr_accessor :card_media_code

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['account_id'] = 'AccountId'
      @_hash['account_name'] = 'AccountName'
      @_hash['account_number'] = 'AccountNumber'
      @_hash['account_short_name'] = 'AccountShortName'
      @_hash['bundle_id'] = 'BundleId'
      @_hash['card_block_schedules'] = 'CardBlockSchedules'
      @_hash['card_group_id'] = 'CardGroupId'
      @_hash['card_group_name'] = 'CardGroupName'
      @_hash['card_id'] = 'CardId'
      @_hash['card_type_code'] = 'CardTypeCode'
      @_hash['card_type_id'] = 'CardTypeId'
      @_hash['card_type_name'] = 'CardTypeName'
      @_hash['col_co_country_code'] = 'ColCoCountryCode'
      @_hash['creation_date'] = 'CreationDate'
      @_hash['driver_name'] = 'DriverName'
      @_hash['effective_date'] = 'EffectiveDate'
      @_hash['expiry_date'] = 'ExpiryDate'
      @_hash['fleet_id_input'] = 'FleetIdInput'
      @_hash['is_crt'] = 'IsCRT'
      @_hash['is_fleet'] = 'IsFleet'
      @_hash['is_international'] = 'IsInternational'
      @_hash['is_national'] = 'IsNational'
      @_hash['is_partner_sites_included'] = 'IsPartnerSitesIncluded'
      @_hash['is_shell_sites_only'] = 'IsShellSitesOnly'
      @_hash['issue_date'] = 'IssueDate'
      @_hash['is_superseded'] = 'IsSuperseded'
      @_hash['is_virtual_card'] = 'IsVirtualCard'
      @_hash['last_modified_date'] = 'LastModifiedDate'
      @_hash['last_used_date'] = 'LastUsedDate'
      @_hash['local_currency_code'] = 'LocalCurrencyCode'
      @_hash['local_currency_symbol'] = 'LocalCurrencySymbol'
      @_hash['odometer_input'] = 'OdometerInput'
      @_hash['pan'] = 'PAN'
      @_hash['purchase_category_code'] = 'PurchaseCategoryCode'
      @_hash['purchase_category_id'] = 'PurchaseCategoryId'
      @_hash['purchase_category_name'] = 'PurchaseCategoryName'
      @_hash['reason'] = 'Reason'
      @_hash['reissue_setting'] = 'ReissueSetting'
      @_hash['status_description'] = 'StatusDescription'
      @_hash['status_id'] = 'StatusId'
      @_hash['token_type_id'] = 'TokenTypeID'
      @_hash['token_type_name'] = 'TokenTypeName'
      @_hash['vrn'] = 'VRN'
      @_hash['client_reference_id'] = 'ClientReferenceId'
      @_hash['is_emv_contact'] = 'IsEMVContact'
      @_hash['is_emv_contactless'] = 'IsEMVContactless'
      @_hash['is_rfid'] = 'IsRFID'
      @_hash['rfiduid'] = 'RFIDUID'
      @_hash['emaid'] = 'EMAID'
      @_hash['ev_printed_number'] = 'EVPrintedNumber'
      @_hash['card_media_code'] = 'CardMediaCode'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        account_id
        account_name
        account_number
        account_short_name
        bundle_id
        card_block_schedules
        card_group_id
        card_group_name
        card_id
        card_type_code
        card_type_id
        card_type_name
        col_co_country_code
        creation_date
        driver_name
        effective_date
        expiry_date
        fleet_id_input
        is_crt
        is_fleet
        is_international
        is_national
        is_partner_sites_included
        is_shell_sites_only
        issue_date
        is_superseded
        is_virtual_card
        last_modified_date
        last_used_date
        local_currency_code
        local_currency_symbol
        odometer_input
        pan
        purchase_category_code
        purchase_category_id
        purchase_category_name
        reason
        reissue_setting
        status_description
        status_id
        token_type_id
        token_type_name
        vrn
        client_reference_id
        is_emv_contact
        is_emv_contactless
        is_rfid
        rfiduid
        emaid
        ev_printed_number
        card_media_code
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        account_id
        account_name
        account_number
        account_short_name
        bundle_id
        card_group_id
        card_group_name
        card_id
        card_type_code
        card_type_id
        card_type_name
        col_co_country_code
        creation_date
        driver_name
        effective_date
        expiry_date
        issue_date
        last_modified_date
        last_used_date
        local_currency_code
        local_currency_symbol
        pan
        purchase_category_code
        purchase_category_id
        purchase_category_name
        reason
        reissue_setting
        status_description
        status_id
        token_type_id
        vrn
        client_reference_id
        rfiduid
        emaid
        ev_printed_number
        card_media_code
      ]
    end

    def initialize(account_id = SKIP, account_name = SKIP,
                   account_number = SKIP, account_short_name = SKIP,
                   bundle_id = SKIP, card_block_schedules = SKIP,
                   card_group_id = SKIP, card_group_name = SKIP, card_id = SKIP,
                   card_type_code = SKIP, card_type_id = SKIP,
                   card_type_name = SKIP, col_co_country_code = SKIP,
                   creation_date = SKIP, driver_name = SKIP,
                   effective_date = SKIP, expiry_date = SKIP,
                   fleet_id_input = SKIP, is_crt = SKIP, is_fleet = SKIP,
                   is_international = SKIP, is_national = SKIP,
                   is_partner_sites_included = SKIP, is_shell_sites_only = SKIP,
                   issue_date = SKIP, is_superseded = SKIP,
                   is_virtual_card = SKIP, last_modified_date = SKIP,
                   last_used_date = SKIP, local_currency_code = SKIP,
                   local_currency_symbol = SKIP, odometer_input = SKIP,
                   pan = SKIP, purchase_category_code = SKIP,
                   purchase_category_id = SKIP, purchase_category_name = SKIP,
                   reason = SKIP, reissue_setting = SKIP,
                   status_description = SKIP, status_id = SKIP,
                   token_type_id = SKIP, token_type_name = SKIP, vrn = SKIP,
                   client_reference_id = SKIP, is_emv_contact = SKIP,
                   is_emv_contactless = SKIP, is_rfid = SKIP, rfiduid = SKIP,
                   emaid = SKIP, ev_printed_number = SKIP,
                   card_media_code = SKIP)
      @account_id = account_id unless account_id == SKIP
      @account_name = account_name unless account_name == SKIP
      @account_number = account_number unless account_number == SKIP
      @account_short_name = account_short_name unless account_short_name == SKIP
      @bundle_id = bundle_id unless bundle_id == SKIP
      @card_block_schedules = card_block_schedules unless card_block_schedules == SKIP
      @card_group_id = card_group_id unless card_group_id == SKIP
      @card_group_name = card_group_name unless card_group_name == SKIP
      @card_id = card_id unless card_id == SKIP
      @card_type_code = card_type_code unless card_type_code == SKIP
      @card_type_id = card_type_id unless card_type_id == SKIP
      @card_type_name = card_type_name unless card_type_name == SKIP
      @col_co_country_code = col_co_country_code unless col_co_country_code == SKIP
      @creation_date = creation_date unless creation_date == SKIP
      @driver_name = driver_name unless driver_name == SKIP
      @effective_date = effective_date unless effective_date == SKIP
      @expiry_date = expiry_date unless expiry_date == SKIP
      @fleet_id_input = fleet_id_input unless fleet_id_input == SKIP
      @is_crt = is_crt unless is_crt == SKIP
      @is_fleet = is_fleet unless is_fleet == SKIP
      @is_international = is_international unless is_international == SKIP
      @is_national = is_national unless is_national == SKIP
      unless is_partner_sites_included == SKIP
        @is_partner_sites_included =
          is_partner_sites_included
      end
      @is_shell_sites_only = is_shell_sites_only unless is_shell_sites_only == SKIP
      @issue_date = issue_date unless issue_date == SKIP
      @is_superseded = is_superseded unless is_superseded == SKIP
      @is_virtual_card = is_virtual_card unless is_virtual_card == SKIP
      @last_modified_date = last_modified_date unless last_modified_date == SKIP
      @last_used_date = last_used_date unless last_used_date == SKIP
      @local_currency_code = local_currency_code unless local_currency_code == SKIP
      @local_currency_symbol = local_currency_symbol unless local_currency_symbol == SKIP
      @odometer_input = odometer_input unless odometer_input == SKIP
      @pan = pan unless pan == SKIP
      @purchase_category_code = purchase_category_code unless purchase_category_code == SKIP
      @purchase_category_id = purchase_category_id unless purchase_category_id == SKIP
      @purchase_category_name = purchase_category_name unless purchase_category_name == SKIP
      @reason = reason unless reason == SKIP
      @reissue_setting = reissue_setting unless reissue_setting == SKIP
      @status_description = status_description unless status_description == SKIP
      @status_id = status_id unless status_id == SKIP
      @token_type_id = token_type_id unless token_type_id == SKIP
      @token_type_name = token_type_name unless token_type_name == SKIP
      @vrn = vrn unless vrn == SKIP
      @client_reference_id = client_reference_id unless client_reference_id == SKIP
      @is_emv_contact = is_emv_contact unless is_emv_contact == SKIP
      @is_emv_contactless = is_emv_contactless unless is_emv_contactless == SKIP
      @is_rfid = is_rfid unless is_rfid == SKIP
      @rfiduid = rfiduid unless rfiduid == SKIP
      @emaid = emaid unless emaid == SKIP
      @ev_printed_number = ev_printed_number unless ev_printed_number == SKIP
      @card_media_code = card_media_code unless card_media_code == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      account_id = hash.key?('AccountId') ? hash['AccountId'] : SKIP
      account_name = hash.key?('AccountName') ? hash['AccountName'] : SKIP
      account_number = hash.key?('AccountNumber') ? hash['AccountNumber'] : SKIP
      account_short_name =
        hash.key?('AccountShortName') ? hash['AccountShortName'] : SKIP
      bundle_id = hash.key?('BundleId') ? hash['BundleId'] : SKIP
      # Parameter is an array, so we need to iterate through it
      card_block_schedules = nil
      unless hash['CardBlockSchedules'].nil?
        card_block_schedules = []
        hash['CardBlockSchedules'].each do |structure|
          card_block_schedules << (CardBlockSchedule.from_hash(structure) if structure)
        end
      end

      card_block_schedules = SKIP unless hash.key?('CardBlockSchedules')
      card_group_id = hash.key?('CardGroupId') ? hash['CardGroupId'] : SKIP
      card_group_name =
        hash.key?('CardGroupName') ? hash['CardGroupName'] : SKIP
      card_id = hash.key?('CardId') ? hash['CardId'] : SKIP
      card_type_code = hash.key?('CardTypeCode') ? hash['CardTypeCode'] : SKIP
      card_type_id = hash.key?('CardTypeId') ? hash['CardTypeId'] : SKIP
      card_type_name = hash.key?('CardTypeName') ? hash['CardTypeName'] : SKIP
      col_co_country_code =
        hash.key?('ColCoCountryCode') ? hash['ColCoCountryCode'] : SKIP
      creation_date = hash.key?('CreationDate') ? hash['CreationDate'] : SKIP
      driver_name = hash.key?('DriverName') ? hash['DriverName'] : SKIP
      effective_date = hash.key?('EffectiveDate') ? hash['EffectiveDate'] : SKIP
      expiry_date = hash.key?('ExpiryDate') ? hash['ExpiryDate'] : SKIP
      fleet_id_input = hash.key?('FleetIdInput') ? hash['FleetIdInput'] : SKIP
      is_crt = hash.key?('IsCRT') ? hash['IsCRT'] : SKIP
      is_fleet = hash.key?('IsFleet') ? hash['IsFleet'] : SKIP
      is_international =
        hash.key?('IsInternational') ? hash['IsInternational'] : SKIP
      is_national = hash.key?('IsNational') ? hash['IsNational'] : SKIP
      is_partner_sites_included =
        hash.key?('IsPartnerSitesIncluded') ? hash['IsPartnerSitesIncluded'] : SKIP
      is_shell_sites_only =
        hash.key?('IsShellSitesOnly') ? hash['IsShellSitesOnly'] : SKIP
      issue_date = hash.key?('IssueDate') ? hash['IssueDate'] : SKIP
      is_superseded = hash.key?('IsSuperseded') ? hash['IsSuperseded'] : SKIP
      is_virtual_card =
        hash.key?('IsVirtualCard') ? hash['IsVirtualCard'] : SKIP
      last_modified_date =
        hash.key?('LastModifiedDate') ? hash['LastModifiedDate'] : SKIP
      last_used_date = hash.key?('LastUsedDate') ? hash['LastUsedDate'] : SKIP
      local_currency_code =
        hash.key?('LocalCurrencyCode') ? hash['LocalCurrencyCode'] : SKIP
      local_currency_symbol =
        hash.key?('LocalCurrencySymbol') ? hash['LocalCurrencySymbol'] : SKIP
      odometer_input = hash.key?('OdometerInput') ? hash['OdometerInput'] : SKIP
      pan = hash.key?('PAN') ? hash['PAN'] : SKIP
      purchase_category_code =
        hash.key?('PurchaseCategoryCode') ? hash['PurchaseCategoryCode'] : SKIP
      purchase_category_id =
        hash.key?('PurchaseCategoryId') ? hash['PurchaseCategoryId'] : SKIP
      purchase_category_name =
        hash.key?('PurchaseCategoryName') ? hash['PurchaseCategoryName'] : SKIP
      reason = hash.key?('Reason') ? hash['Reason'] : SKIP
      reissue_setting =
        hash.key?('ReissueSetting') ? hash['ReissueSetting'] : SKIP
      status_description =
        hash.key?('StatusDescription') ? hash['StatusDescription'] : SKIP
      status_id = hash.key?('StatusId') ? hash['StatusId'] : SKIP
      token_type_id = hash.key?('TokenTypeID') ? hash['TokenTypeID'] : SKIP
      token_type_name =
        hash.key?('TokenTypeName') ? hash['TokenTypeName'] : SKIP
      vrn = hash.key?('VRN') ? hash['VRN'] : SKIP
      client_reference_id =
        hash.key?('ClientReferenceId') ? hash['ClientReferenceId'] : SKIP
      is_emv_contact = hash.key?('IsEMVContact') ? hash['IsEMVContact'] : SKIP
      is_emv_contactless =
        hash.key?('IsEMVContactless') ? hash['IsEMVContactless'] : SKIP
      is_rfid = hash.key?('IsRFID') ? hash['IsRFID'] : SKIP
      rfiduid = hash.key?('RFIDUID') ? hash['RFIDUID'] : SKIP
      emaid = hash.key?('EMAID') ? hash['EMAID'] : SKIP
      ev_printed_number =
        hash.key?('EVPrintedNumber') ? hash['EVPrintedNumber'] : SKIP
      card_media_code =
        hash.key?('CardMediaCode') ? hash['CardMediaCode'] : SKIP

      # Create object from extracted values.
      Card.new(account_id,
               account_name,
               account_number,
               account_short_name,
               bundle_id,
               card_block_schedules,
               card_group_id,
               card_group_name,
               card_id,
               card_type_code,
               card_type_id,
               card_type_name,
               col_co_country_code,
               creation_date,
               driver_name,
               effective_date,
               expiry_date,
               fleet_id_input,
               is_crt,
               is_fleet,
               is_international,
               is_national,
               is_partner_sites_included,
               is_shell_sites_only,
               issue_date,
               is_superseded,
               is_virtual_card,
               last_modified_date,
               last_used_date,
               local_currency_code,
               local_currency_symbol,
               odometer_input,
               pan,
               purchase_category_code,
               purchase_category_id,
               purchase_category_name,
               reason,
               reissue_setting,
               status_description,
               status_id,
               token_type_id,
               token_type_name,
               vrn,
               client_reference_id,
               is_emv_contact,
               is_emv_contactless,
               is_rfid,
               rfiduid,
               emaid,
               ev_printed_number,
               card_media_code)
    end
  end
end
