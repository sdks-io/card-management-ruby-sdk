# shell_card_management_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellCardManagementApIs
  # BundledDetailsProductList Model.
  class BundledDetailsProductList < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Purchase category Id
    # Example: 123, 124, etc.,
    # @return [Integer]
    attr_accessor :purchase_category_id

    # Purchase category name.
    # Example: 
    # 0 - All Fuels (without VP) and Lubricants
    # 1 - FuelSave only
    # 2 - FuelSave and Lubricants
    # 3 - No Restrictions
    # @return [String]
    attr_accessor :purchase_category_code

    # An array of 3-digit global product codes.
    # Example: [ "033", "021", "023" ]
    # @return [Array[String]]
    attr_accessor :products

    # An array of product group ids.
    # Example: [ "670246404", "40557126" ]
    # @return [Array[String]]
    attr_accessor :product_groups

    # Fuel set id that is allowed to be purchased with the card
    # @return [String]
    attr_accessor :fuel_set_id

    # Fuel set name that is allowed to be purchased with the card
    # @return [String]
    attr_accessor :fuel_set_name

    # Non-Fuel set name that is allowed to be purchased with the card
    # @return [String]
    attr_accessor :non_fuel_sets

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['purchase_category_id'] = 'PurchaseCategoryId'
      @_hash['purchase_category_code'] = 'PurchaseCategoryCode'
      @_hash['products'] = 'Products'
      @_hash['product_groups'] = 'ProductGroups'
      @_hash['fuel_set_id'] = 'FuelSetId'
      @_hash['fuel_set_name'] = 'FuelSetName'
      @_hash['non_fuel_sets'] = 'NonFuelSets'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        purchase_category_id
        purchase_category_code
        products
        product_groups
        fuel_set_id
        fuel_set_name
        non_fuel_sets
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(purchase_category_id = SKIP, purchase_category_code = SKIP,
                   products = SKIP, product_groups = SKIP, fuel_set_id = SKIP,
                   fuel_set_name = SKIP, non_fuel_sets = SKIP)
      @purchase_category_id = purchase_category_id unless purchase_category_id == SKIP
      @purchase_category_code = purchase_category_code unless purchase_category_code == SKIP
      @products = products unless products == SKIP
      @product_groups = product_groups unless product_groups == SKIP
      @fuel_set_id = fuel_set_id unless fuel_set_id == SKIP
      @fuel_set_name = fuel_set_name unless fuel_set_name == SKIP
      @non_fuel_sets = non_fuel_sets unless non_fuel_sets == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      purchase_category_id =
        hash.key?('PurchaseCategoryId') ? hash['PurchaseCategoryId'] : SKIP
      purchase_category_code =
        hash.key?('PurchaseCategoryCode') ? hash['PurchaseCategoryCode'] : SKIP
      products = hash.key?('Products') ? hash['Products'] : SKIP
      product_groups = hash.key?('ProductGroups') ? hash['ProductGroups'] : SKIP
      fuel_set_id = hash.key?('FuelSetId') ? hash['FuelSetId'] : SKIP
      fuel_set_name = hash.key?('FuelSetName') ? hash['FuelSetName'] : SKIP
      non_fuel_sets = hash.key?('NonFuelSets') ? hash['NonFuelSets'] : SKIP

      # Create object from extracted values.
      BundledDetailsProductList.new(purchase_category_id,
                                    purchase_category_code,
                                    products,
                                    product_groups,
                                    fuel_set_id,
                                    fuel_set_name,
                                    non_fuel_sets)
    end
  end
end
