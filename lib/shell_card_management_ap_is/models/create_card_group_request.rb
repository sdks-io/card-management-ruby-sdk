# shell_card_management_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellCardManagementApIs
  # CreateCardGroupRequest Model.
  class CreateCardGroupRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Collecting Company Code (Shell Code) of the selected payer. 
    # Mandatory for serviced OUs such as Romania, Latvia, Lithuania, Estonia,
    # Ukraine etc. It is optional for other countries if ColCoID is provided.
    # Example:
    # 86-Philippines
    # 5-UK
    # @return [Integer]
    attr_accessor :col_co_code

    # Collecting Company Id  of the selected payer. 
    # Optional if ColCoCode is passed else Mandatory.
    # Example:
    # 1-Philippines
    # 5-UK
    # @return [Integer]
    attr_accessor :col_co_id

    # Payer Number of the selected payer.
    # Optional if PayerId is passed else Mandatory
    # @return [String]
    attr_accessor :payer_number

    # Payer Id (i.e., Customer Id of the Payment Customer in H3 Cards Platform)
    # of the selected payer.
    # Optional if PayerNumber is passed else Mandatory
    # @return [Integer]
    attr_accessor :payer_id

    # Account ID of the customer.
    # Optional if AccountNumber is passed else Mandatory.
    # @return [Integer]
    attr_accessor :account_id

    # Account Number of the customer.
    # Optional if AccountId is passed else Mandatory.
    # @return [String]
    attr_accessor :account_number

    # Whether card group name to be embossed on the cards or not.
    # @return [TrueClass | FalseClass]
    attr_accessor :print_on_card

    # Whether card group name to be embossed on the cards or not.
    # @return [String]
    attr_accessor :card_group_name

    # List of cards to be moved to the new card group. This list is optional â€“
    # no card will be moved to the new card group when the list is empty.
    # The fields of Card entity are described in the below rows.
    # The maximum number of cards allowed to be moved in a request is 500
    # (configurable). The whole request including the card group creation will
    # be rejected when the limit is exceeded.
    # @return [Array[CreateCardGroupRequestCardsItems]]
    attr_accessor :cards

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['col_co_code'] = 'ColCoCode'
      @_hash['col_co_id'] = 'ColCoId'
      @_hash['payer_number'] = 'PayerNumber'
      @_hash['payer_id'] = 'PayerId'
      @_hash['account_id'] = 'AccountId'
      @_hash['account_number'] = 'AccountNumber'
      @_hash['print_on_card'] = 'PrintOnCard'
      @_hash['card_group_name'] = 'CardGroupName'
      @_hash['cards'] = 'Cards'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        col_co_code
        col_co_id
        payer_number
        payer_id
        account_id
        account_number
        print_on_card
        card_group_name
        cards
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        card_group_name
      ]
    end

    def initialize(col_co_code = SKIP, col_co_id = SKIP, payer_number = SKIP,
                   payer_id = SKIP, account_id = SKIP, account_number = SKIP,
                   print_on_card = SKIP, card_group_name = SKIP, cards = SKIP)
      @col_co_code = col_co_code unless col_co_code == SKIP
      @col_co_id = col_co_id unless col_co_id == SKIP
      @payer_number = payer_number unless payer_number == SKIP
      @payer_id = payer_id unless payer_id == SKIP
      @account_id = account_id unless account_id == SKIP
      @account_number = account_number unless account_number == SKIP
      @print_on_card = print_on_card unless print_on_card == SKIP
      @card_group_name = card_group_name unless card_group_name == SKIP
      @cards = cards unless cards == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      col_co_code = hash.key?('ColCoCode') ? hash['ColCoCode'] : SKIP
      col_co_id = hash.key?('ColCoId') ? hash['ColCoId'] : SKIP
      payer_number = hash.key?('PayerNumber') ? hash['PayerNumber'] : SKIP
      payer_id = hash.key?('PayerId') ? hash['PayerId'] : SKIP
      account_id = hash.key?('AccountId') ? hash['AccountId'] : SKIP
      account_number = hash.key?('AccountNumber') ? hash['AccountNumber'] : SKIP
      print_on_card = hash.key?('PrintOnCard') ? hash['PrintOnCard'] : SKIP
      card_group_name =
        hash.key?('CardGroupName') ? hash['CardGroupName'] : SKIP
      # Parameter is an array, so we need to iterate through it
      cards = nil
      unless hash['Cards'].nil?
        cards = []
        hash['Cards'].each do |structure|
          cards << (CreateCardGroupRequestCardsItems.from_hash(structure) if structure)
        end
      end

      cards = SKIP unless hash.key?('Cards')

      # Create object from extracted values.
      CreateCardGroupRequest.new(col_co_code,
                                 col_co_id,
                                 payer_number,
                                 payer_id,
                                 account_id,
                                 account_number,
                                 print_on_card,
                                 card_group_name,
                                 cards)
    end
  end
end
