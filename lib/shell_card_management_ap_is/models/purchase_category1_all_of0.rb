# shell_card_management_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellCardManagementApIs
  # PurchaseCategory1AllOf0 Model.
  class PurchaseCategory1AllOf0 < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Purchase category ID
    # @return [Integer]
    attr_accessor :id

    # Purchase category code
    # @return [String]
    attr_accessor :code

    # Name of Purchase category .
    # @return [String]
    attr_accessor :name

    # PurchaseCategory can be used while submitting new order cards requests if
    # true else will not be used for ordering cards.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_visible

    # List of product sets
    # @return [Array[ProductGroup]]
    attr_accessor :product_groups

    # Purchase category Title by given language code.
    # 1.	Basic 
    # 2.	Essentials
    # 3.	Extra 
    # 4.	Premium
    # 5.	Basic and LNG
    # 6.	Essentials and LNG
    # 7.	Extra and LNG
    # 8.	Premium and LNG
    # Note: Purchase Category name (GFN) is returned when Title does not exist
    # for the given language Code and default language code (en-GB).
    # @return [String]
    attr_accessor :title

    # Purchase category description by given language code.
    # Example: 
    # 0 - Diesel Products and TMF
    # 1 - All Fuel Products and TMF
    # 2 - All Fuels Products, Car related items and TMF
    # 3 - No Restriction
    # 0 - Diesel Products + LNG and TMF
    # 1 - All Fuel Products + LNG and TMF
    # 2 - All Fuels Products + LNG, Car related items and TMF
    # 3 - No Restriction + LNG 
    # Note: Purchase Category name (GFN) is returned when Title does not exist
    # for the given language Code and default language code (en-GB).
    # @return [String]
    attr_accessor :description

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'Id'
      @_hash['code'] = 'Code'
      @_hash['name'] = 'Name'
      @_hash['is_visible'] = 'IsVisible'
      @_hash['product_groups'] = 'ProductGroups'
      @_hash['title'] = 'Title'
      @_hash['description'] = 'Description'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        title
        description
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        id
        code
        name
      ]
    end

    def initialize(id = nil, code = nil, name = nil, is_visible = nil,
                   product_groups = nil, title = SKIP, description = SKIP)
      @id = id
      @code = code
      @name = name
      @is_visible = is_visible
      @product_groups = product_groups
      @title = title unless title == SKIP
      @description = description unless description == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('Id') ? hash['Id'] : nil
      code = hash.key?('Code') ? hash['Code'] : nil
      name = hash.key?('Name') ? hash['Name'] : nil
      is_visible = hash.key?('IsVisible') ? hash['IsVisible'] : nil
      # Parameter is an array, so we need to iterate through it
      product_groups = nil
      unless hash['ProductGroups'].nil?
        product_groups = []
        hash['ProductGroups'].each do |structure|
          product_groups << (ProductGroup.from_hash(structure) if structure)
        end
      end

      product_groups = nil unless hash.key?('ProductGroups')
      title = hash.key?('Title') ? hash['Title'] : SKIP
      description = hash.key?('Description') ? hash['Description'] : SKIP

      # Create object from extracted values.
      PurchaseCategory1AllOf0.new(id,
                                  code,
                                  name,
                                  is_visible,
                                  product_groups,
                                  title,
                                  description)
    end
  end
end
