# shell_card_management_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellCardManagementApIs
  # Location restrictions to be applied on the bundle which either allows or
  # restricts using the cards, which are under the bundle, in the specified
  # locations.  Mandatory if respective action is set as “Add”. Details of
  # location restrictions are given below.
  class LocationRestrictions < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # An entity that encapsulate the country restrictions.
    # Optional.
    # @return [LocationRestrictionsCountryRestrictions]
    attr_accessor :country_restrictions

    # A list of NetworkRestriction entity. Each item in the list encapsulates a
    # network restriction in a given country.
    # Optional.
    # The details of the entity are described below:
    # @return [Array[LocationRestrictionsNetworkRestrictionsItems]]
    attr_accessor :network_restrictions

    # A list of ShellSiteRestriction entity. Each item in the list encapsulates
    # a site restriction of Shell network in a given country.
    # Optional.
    # The details of the entity are described below.
    # @return [Array[LocationRestrictionsShellSiteRestrictionsItems]]
    attr_accessor :shell_site_restrictions

    # A list of PartnerSiteRestriction entity. Each item in the list
    # encapsulates a site restriction of a given partner network.
    # Optional.
    # The details of the entity are described below.
    # @return [Array[LocationRestrictionsPartnerSiteRestrictionsItems]]
    attr_accessor :partner_site_restrictions

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['country_restrictions'] = 'CountryRestrictions'
      @_hash['network_restrictions'] = 'NetworkRestrictions'
      @_hash['shell_site_restrictions'] = 'ShellSiteRestrictions'
      @_hash['partner_site_restrictions'] = 'PartnerSiteRestrictions'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        country_restrictions
        network_restrictions
        shell_site_restrictions
        partner_site_restrictions
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(country_restrictions = SKIP,
                   network_restrictions = SKIP,
                   shell_site_restrictions = SKIP,
                   partner_site_restrictions = SKIP)
      @country_restrictions = country_restrictions unless country_restrictions == SKIP
      @network_restrictions = network_restrictions unless network_restrictions == SKIP
      @shell_site_restrictions = shell_site_restrictions unless shell_site_restrictions == SKIP
      unless partner_site_restrictions == SKIP
        @partner_site_restrictions =
          partner_site_restrictions
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      if hash['CountryRestrictions']
        country_restrictions = LocationRestrictionsCountryRestrictions.from_hash(hash['CountryRestrictions'])
      end
      # Parameter is an array, so we need to iterate through it
      network_restrictions = nil
      unless hash['NetworkRestrictions'].nil?
        network_restrictions = []
        hash['NetworkRestrictions'].each do |structure|
          network_restrictions << (LocationRestrictionsNetworkRestrictionsItems.from_hash(structure) if structure)
        end
      end

      network_restrictions = SKIP unless hash.key?('NetworkRestrictions')
      # Parameter is an array, so we need to iterate through it
      shell_site_restrictions = nil
      unless hash['ShellSiteRestrictions'].nil?
        shell_site_restrictions = []
        hash['ShellSiteRestrictions'].each do |structure|
          shell_site_restrictions << (LocationRestrictionsShellSiteRestrictionsItems.from_hash(structure) if structure)
        end
      end

      shell_site_restrictions = SKIP unless hash.key?('ShellSiteRestrictions')
      # Parameter is an array, so we need to iterate through it
      partner_site_restrictions = nil
      unless hash['PartnerSiteRestrictions'].nil?
        partner_site_restrictions = []
        hash['PartnerSiteRestrictions'].each do |structure|
          partner_site_restrictions << (LocationRestrictionsPartnerSiteRestrictionsItems.from_hash(structure) if structure)
        end
      end

      partner_site_restrictions = SKIP unless hash.key?('PartnerSiteRestrictions')

      # Create object from extracted values.
      LocationRestrictions.new(country_restrictions,
                               network_restrictions,
                               shell_site_restrictions,
                               partner_site_restrictions)
    end
  end
end
