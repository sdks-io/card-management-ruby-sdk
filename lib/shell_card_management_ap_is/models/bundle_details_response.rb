# shell_card_management_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellCardManagementApIs
  # BundleDetailsResponse Model.
  class BundleDetailsResponse < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Payer Id of the bundles and cards.
    # Example: 123456
    # @return [Integer]
    attr_accessor :payer_id

    # Payer Number of the bundles and cards.
    # Example: GB000000123
    # @return [String]
    attr_accessor :payer_number

    # Account ID of the bundle.
    # Example: 123456
    # @return [Integer]
    attr_accessor :account_id

    # Account Number of the bundle.
    # Example: GB000000123
    # @return [String]
    attr_accessor :account_number

    # unique identifier for the Card Bundle
    # @return [String]
    attr_accessor :bundle_id

    # External system allocated Card Bundle identifier for Card Bundle.
    # @return [String]
    attr_accessor :external_bundle_id

    # Card Bundle Description.
    # @return [String]
    attr_accessor :description

    # List of Card Pans added to the card bundle.
    # @return [Array[String]]
    attr_accessor :pans

    # ISO currency code of the country.
    # Example: GBP
    # @return [String]
    attr_accessor :restriction_currency_code

    # Currency symbol of the country.
    # Example: £, $
    # @return [String]
    attr_accessor :restriction_currency_symbol

    # Currency symbol of the country.
    # Example: £, $
    # @return [BundledRestrictionsList]
    attr_accessor :restrictions

    # Currency symbol of the country.
    # Example: £, $
    # @return [ErrorStatus]
    attr_accessor :error

    # API Request Id
    # @return [String]
    attr_accessor :request_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['payer_id'] = 'PayerId'
      @_hash['payer_number'] = 'PayerNumber'
      @_hash['account_id'] = 'AccountId'
      @_hash['account_number'] = 'AccountNumber'
      @_hash['bundle_id'] = 'BundleId'
      @_hash['external_bundle_id'] = 'ExternalBundleId'
      @_hash['description'] = 'Description'
      @_hash['pans'] = 'Pans'
      @_hash['restriction_currency_code'] = 'RestrictionCurrencyCode'
      @_hash['restriction_currency_symbol'] = 'RestrictionCurrencySymbol'
      @_hash['restrictions'] = 'Restrictions'
      @_hash['error'] = 'Error'
      @_hash['request_id'] = 'RequestId'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        payer_id
        payer_number
        account_id
        account_number
        bundle_id
        external_bundle_id
        description
        pans
        restriction_currency_code
        restriction_currency_symbol
        restrictions
        error
        request_id
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(payer_id = SKIP, payer_number = SKIP, account_id = SKIP,
                   account_number = SKIP, bundle_id = SKIP,
                   external_bundle_id = SKIP, description = SKIP, pans = SKIP,
                   restriction_currency_code = SKIP,
                   restriction_currency_symbol = SKIP, restrictions = SKIP,
                   error = SKIP, request_id = SKIP)
      @payer_id = payer_id unless payer_id == SKIP
      @payer_number = payer_number unless payer_number == SKIP
      @account_id = account_id unless account_id == SKIP
      @account_number = account_number unless account_number == SKIP
      @bundle_id = bundle_id unless bundle_id == SKIP
      @external_bundle_id = external_bundle_id unless external_bundle_id == SKIP
      @description = description unless description == SKIP
      @pans = pans unless pans == SKIP
      unless restriction_currency_code == SKIP
        @restriction_currency_code =
          restriction_currency_code
      end
      unless restriction_currency_symbol == SKIP
        @restriction_currency_symbol =
          restriction_currency_symbol
      end
      @restrictions = restrictions unless restrictions == SKIP
      @error = error unless error == SKIP
      @request_id = request_id unless request_id == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      payer_id = hash.key?('PayerId') ? hash['PayerId'] : SKIP
      payer_number = hash.key?('PayerNumber') ? hash['PayerNumber'] : SKIP
      account_id = hash.key?('AccountId') ? hash['AccountId'] : SKIP
      account_number = hash.key?('AccountNumber') ? hash['AccountNumber'] : SKIP
      bundle_id = hash.key?('BundleId') ? hash['BundleId'] : SKIP
      external_bundle_id =
        hash.key?('ExternalBundleId') ? hash['ExternalBundleId'] : SKIP
      description = hash.key?('Description') ? hash['Description'] : SKIP
      pans = hash.key?('Pans') ? hash['Pans'] : SKIP
      restriction_currency_code =
        hash.key?('RestrictionCurrencyCode') ? hash['RestrictionCurrencyCode'] : SKIP
      restriction_currency_symbol =
        hash.key?('RestrictionCurrencySymbol') ? hash['RestrictionCurrencySymbol'] : SKIP
      restrictions = BundledRestrictionsList.from_hash(hash['Restrictions']) if
        hash['Restrictions']
      error = ErrorStatus.from_hash(hash['Error']) if hash['Error']
      request_id = hash.key?('RequestId') ? hash['RequestId'] : SKIP

      # Create object from extracted values.
      BundleDetailsResponse.new(payer_id,
                                payer_number,
                                account_id,
                                account_number,
                                bundle_id,
                                external_bundle_id,
                                description,
                                pans,
                                restriction_currency_code,
                                restriction_currency_symbol,
                                restrictions,
                                error,
                                request_id)
    end
  end
end
