# shell_card_management_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellCardManagementApIs
  # UpdateCardGroupResponse Model.
  class UpdateCardGroupResponse < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Reference number for tracking the overall request.
    # The value will be null when the validation fails.
    # @return [Integer]
    attr_accessor :main_reference

    # Reference number for tracking the execution of terminate card-group
    # request.
    # Reference number will be null when the validations fail or
    # TerminateCardGroup in the request object is false.
    # @return [Integer]
    attr_accessor :update_card_group_reference

    # Reference number for tracking the execution of new card group creation in
    # the case when the cards in the terminating card-group have to be moved to
    # a new card-group. 
    # Reference number will be null when the validations fail or new card-group
    # creation is not requested.
    # @return [Integer]
    attr_accessor :new_card_group_reference

    # List of cards submitted successfully for processing the move to the target
    # card-group or to change card-group to null.
    # This list will be empty when the validations fail or there are no cards in
    # the card-group that is getting terminated or MoveCards in the request
    # object is false
    # @return [Array[UpdateCardGroupResponseMoveCardReferencesItems]]
    attr_accessor :move_card_references

    # List of cards submitted successfully for processing the move to the target
    # card-group or to change card-group to null.
    # This list will be empty when the validations fail or there are no cards in
    # the card-group that is getting terminated or MoveCards in the request
    # object is false
    # @return [ErrorStatus]
    attr_accessor :error

    # API Request ID
    # @return [String]
    attr_accessor :request_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['main_reference'] = 'MainReference'
      @_hash['update_card_group_reference'] = 'UpdateCardGroupReference'
      @_hash['new_card_group_reference'] = 'NewCardGroupReference'
      @_hash['move_card_references'] = 'MoveCardReferences'
      @_hash['error'] = 'Error'
      @_hash['request_id'] = 'RequestId'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        main_reference
        update_card_group_reference
        new_card_group_reference
        move_card_references
        error
        request_id
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(main_reference = SKIP,
                   update_card_group_reference = SKIP,
                   new_card_group_reference = SKIP,
                   move_card_references = SKIP,
                   error = SKIP,
                   request_id = SKIP)
      @main_reference = main_reference unless main_reference == SKIP
      unless update_card_group_reference == SKIP
        @update_card_group_reference =
          update_card_group_reference
      end
      @new_card_group_reference = new_card_group_reference unless new_card_group_reference == SKIP
      @move_card_references = move_card_references unless move_card_references == SKIP
      @error = error unless error == SKIP
      @request_id = request_id unless request_id == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      main_reference = hash.key?('MainReference') ? hash['MainReference'] : SKIP
      update_card_group_reference =
        hash.key?('UpdateCardGroupReference') ? hash['UpdateCardGroupReference'] : SKIP
      new_card_group_reference =
        hash.key?('NewCardGroupReference') ? hash['NewCardGroupReference'] : SKIP
      # Parameter is an array, so we need to iterate through it
      move_card_references = nil
      unless hash['MoveCardReferences'].nil?
        move_card_references = []
        hash['MoveCardReferences'].each do |structure|
          move_card_references << (UpdateCardGroupResponseMoveCardReferencesItems.from_hash(structure) if structure)
        end
      end

      move_card_references = SKIP unless hash.key?('MoveCardReferences')
      error = ErrorStatus.from_hash(hash['Error']) if hash['Error']
      request_id = hash.key?('RequestId') ? hash['RequestId'] : SKIP

      # Create object from extracted values.
      UpdateCardGroupResponse.new(main_reference,
                                  update_card_group_reference,
                                  new_card_group_reference,
                                  move_card_references,
                                  error,
                                  request_id)
    end
  end
end
