# shell_card_management_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellCardManagementApIs
  # Day/time restrictions such as weekdays and time range to be applied on the
  # bundle. Mandatory if respective action is set as “Add”. The details of
  # DayTimeRestriction entity is given below.
  class DayTimeRestrictions < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # True/False.
    # True if card could be used on a Friday, else false. 
    # Default value: false.
    # @return [TrueClass | FalseClass]
    attr_accessor :friday

    # True/False.
    # True if card could be used on a Monday, else false. 
    # Default value: false.
    # @return [TrueClass | FalseClass]
    attr_accessor :monday

    # True/False.
    # True if card could be used on a Saturday, else false. 
    # Default value: false.
    # @return [TrueClass | FalseClass]
    attr_accessor :saturday

    # True/False.
    # True if card could be used on a Sunday, else false. 
    # Default value: false.
    # @return [TrueClass | FalseClass]
    attr_accessor :sunday

    # True/False.
    # True if card could be used on a Thursday, else false. 
    # Default value: false.
    # @return [TrueClass | FalseClass]
    attr_accessor :thursday

    # Card could be used from this time in a day.
    # Mandatory if TimeTo is passed, else optional.
    # Format: HH:mm (24-hour format)
    # Note: 
    # 2.	“00:00” is the lowest time value and “23:59” is the highest time value.
    # 
    # To allow card to be used throughout the day pass null in TimeFrom and
    # TimeTo.
    # @return [String]
    attr_accessor :time_from

    # Card could be used up to this time in a day. 
    # Mandatory if TimeFrom is passed, else optional.
    # Format: HH:mm (24-hour format)
    # Note: 
    # 2.	“00:00” is the lowest time value and “23:59” is the highest time value.
    # To allow card to be used throughout the day pass null in TimeFrom and
    # TimeTo.
    # @return [String]
    attr_accessor :time_to

    # True/False.
    # True if card could be used on a Tuesday, else false. 
    # Default value: false.
    # @return [TrueClass | FalseClass]
    attr_accessor :tuesday

    # True/False.
    # True if card could be used on a Wednesday, else false. 
    # Default value: false.
    # @return [TrueClass | FalseClass]
    attr_accessor :wednesday

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['friday'] = 'Friday'
      @_hash['monday'] = 'Monday'
      @_hash['saturday'] = 'Saturday'
      @_hash['sunday'] = 'Sunday'
      @_hash['thursday'] = 'Thursday'
      @_hash['time_from'] = 'TimeFrom'
      @_hash['time_to'] = 'TimeTo'
      @_hash['tuesday'] = 'Tuesday'
      @_hash['wednesday'] = 'Wednesday'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        friday
        monday
        saturday
        sunday
        thursday
        time_from
        time_to
        tuesday
        wednesday
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        time_from
        time_to
      ]
    end

    def initialize(friday = false,
                   monday = false,
                   saturday = false,
                   sunday = false,
                   thursday = false,
                   time_from = SKIP,
                   time_to = SKIP,
                   tuesday = false,
                   wednesday = false)
      @friday = friday unless friday == SKIP
      @monday = monday unless monday == SKIP
      @saturday = saturday unless saturday == SKIP
      @sunday = sunday unless sunday == SKIP
      @thursday = thursday unless thursday == SKIP
      @time_from = time_from unless time_from == SKIP
      @time_to = time_to unless time_to == SKIP
      @tuesday = tuesday unless tuesday == SKIP
      @wednesday = wednesday unless wednesday == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      friday = hash['Friday'] ||= false
      monday = hash['Monday'] ||= false
      saturday = hash['Saturday'] ||= false
      sunday = hash['Sunday'] ||= false
      thursday = hash['Thursday'] ||= false
      time_from = hash.key?('TimeFrom') ? hash['TimeFrom'] : SKIP
      time_to = hash.key?('TimeTo') ? hash['TimeTo'] : SKIP
      tuesday = hash['Tuesday'] ||= false
      wednesday = hash['Wednesday'] ||= false

      # Create object from extracted values.
      DayTimeRestrictions.new(friday,
                              monday,
                              saturday,
                              sunday,
                              thursday,
                              time_from,
                              time_to,
                              tuesday,
                              wednesday)
    end
  end
end
