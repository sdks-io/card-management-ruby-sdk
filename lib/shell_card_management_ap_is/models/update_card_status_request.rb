# shell_card_management_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellCardManagementApIs
  # UpdateStatus Request
  class UpdateCardStatusRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # List of UpdateCardRequest entity. Each card in the list will be updated to
    # the given target status. The details of the entity are given below.
    # @return [Array[UpdateCard]]
    attr_accessor :cards

    # Reason id for updating the card status.<br />
    # Optional<br />
    # Either Reason ID or Text is madatory when TargetStatus is ‘Block’ or
    # ‘Damaged’. Else ignored.<br />
    # Possible values:<br />
    # -Lost <br />
    # -Stolen <br />
    # -Card no longer required<br />
    # When passed, the reason Id will be validated with the allowed reason ids
    # configured for the card type of the card.<br />
    # . If the given reason Id is not allowed for certain card types, then the
    # request will be rejected as invalid ResonId.
    # @return [Integer]
    attr_accessor :reason_id

    # Reason text for updating the card status.<br />
    # Optional Either Reason ID or Text is madatory when TargetStatus is ‘Block’
    # or ‘Damaged’. Else ignored.<br />
    # Possible values:<br />
    # -Lost <br />
    # -Stolen <br />
    # -Card no longer required <br />
    #  Optional – However, either Reason ID or Text is madatory when
    # TargetStatus is ‘Block’ or ‘Damaged’.<br />
    #  When Reason Text is passed and the Target Status is either Block or
    # Damaged, the text will be validated with the allowed list of values
    # configured for the card type of the card.<br />
    #  If the text is not allowed, request will be rejected as invaid
    # ResonText.<br />
    #  Note:<br />
    #  Customer blocked’ will be used as the reason for ‘Temporary Block’.
    # @return [String]
    attr_accessor :reason_text

    # The list of cards passed in Cards parameter will be updated to this
    # status.<br />
    # Mandatory<br />
    # Allowed values:<br />
    # -TemporaryBlock<br />
    # -Unblock<br />
    # -Block<br />
    # -Damaged<br />
    # @return [String]
    attr_accessor :target_status

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['cards'] = 'Cards'
      @_hash['reason_id'] = 'ReasonId'
      @_hash['reason_text'] = 'ReasonText'
      @_hash['target_status'] = 'TargetStatus'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        reason_id
        reason_text
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        reason_id
        reason_text
      ]
    end

    def initialize(cards = nil,
                   target_status = nil,
                   reason_id = SKIP,
                   reason_text = SKIP)
      @cards = cards
      @reason_id = reason_id unless reason_id == SKIP
      @reason_text = reason_text unless reason_text == SKIP
      @target_status = target_status
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      cards = nil
      unless hash['Cards'].nil?
        cards = []
        hash['Cards'].each do |structure|
          cards << (UpdateCard.from_hash(structure) if structure)
        end
      end

      cards = nil unless hash.key?('Cards')
      target_status = hash.key?('TargetStatus') ? hash['TargetStatus'] : nil
      reason_id = hash.key?('ReasonId') ? hash['ReasonId'] : SKIP
      reason_text = hash.key?('ReasonText') ? hash['ReasonText'] : SKIP

      # Create object from extracted values.
      UpdateCardStatusRequest.new(cards,
                                  target_status,
                                  reason_id,
                                  reason_text)
    end
  end
end
