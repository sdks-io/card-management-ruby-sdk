# shell_card_management_ap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellCardManagementApIs
  # RestrictionController
  class RestrictionController < BaseController
    # This API enables clients to create a new card bundle and apply
    # restrictions.
    # #### Supported operations
    #   * Create bundle and include mandatory -
    #     * Usage, day/time, product and location restrictions
    #     * List of cards to add to bundle
    #   * Create bundle and include optional identifier of bundle in external
    # system
    # #### Validation rules
    #   The following are the key validation rules with the associated error
    # codes for failed validation-
    #   * `7012` - At least one card must be added to the bundle
    #   *  `7011` - The total number of cards passed in the input must be 500 or
    # less.
    #   *  `7014` - All the cards passed in the input are part of the selected
    # account.
    #   *  `7013` - At least one restriction must be applied to the bundle i.e.
    # either of usage, day/time, location or product restriction.
    #   *  `7005` - Day time restriction cannot be set to restrict the use of a
    # card on all days of the week.
    #   *  `7000` - Usage restriction of the bundle is not open ended i.e. all
    # the limits within the usage restriction must not be set to 0/null.
    #   *  `7004` - In the usage restrictions, the limits per transaction should
    # be less than or equal to Daily, Daily should be less than or equal to
    # Weekly, Weekly should be less than or equal to Monthly. Exception being
    # 0/blank will be skipped, i.e. Daily value should be less than equal to
    # Monthly value if Weekly value is 0/blank.
    #   *  `0007` - Error returned if request parameters fail validation e.g.
    # mandatory check.
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [CreateBundleRequest] body Optional parameter: Create Bundle
    # Request body
    # @return [CreateBundleResponse] response from the API call
    def restriction_bundle_create(request_id,
                                  body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/card-restrictions/v1/bundles/create',
                                     Server::DEFAULT)
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BearerToken')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(CreateBundleResponse.method(:from_hash))
                   .local_error('400',
                                "The server cannot or will not process the request due to'\
                                 ' something that is perceived to be a client error (e.g.,'\
                                 ' malformed request syntax, invalid request message framing, or'\
                                 ' deceptive request routing).\n",
                                ErrorObjectException)
                   .local_error('401',
                                "The request has not been applied because it lacks valid '\
                                 ' authentication credentials for the target resource.\n",
                                ErrorObjectException)
                   .local_error('403',
                                'Forbidden',
                                ErrorObjectException)
                   .local_error('404',
                                "The origin server did not find a current representation  for'\
                                 ' the target resource or is not willing to disclose  that one'\
                                 ' exists.\n",
                                ErrorObjectException)
                   .local_error('500',
                                "The server encountered an unexpected condition that  prevented'\
                                 ' it from fulfilling the request.\n",
                                ErrorObjectException))
        .execute
    end

    # This API enables clients to update an existing card bundle and its
    # associated restrictions.
    # #### Supported operations
    #   * Add new cards to an existing bundle
    #   * Remove cards from existing bundle
    #   * Update restrictions applied to existing bundle
    #   The following are the key validation rules with the associated error
    # codes for failed validation-
    # #### Validation rules
    #   *  `9007` - The cards must exist in the cards platform for adding or
    # removing cards.
    #   *  `7014` - All the cards passed in the input are part of the selected
    # account.
    #   *  `7018` - All the cards passed in the input are part of the selected
    # bundle.
    #   *  `7011` - The total number of cards passed in the input must be 500 or
    # less.
    #   *  `7012` - The action to remove cards should not result in removing all
    # the cards from the bundle.
    #   *  `7016` - At least one restriction must be modified for â€œUpdateâ€
    # request action.
    #   *  `7013` - All restrictions cannot be marked for â€œResetâ€ for
    # â€œUpdateâ€ request action.
    #   *  `7005` - Day time restriction cannot be set to restrict the use of a
    # card on all days of the week. This validation is applicable for Update
    # request action.
    #   *  `7000` - Usage restriction of the bundle is not open ended i.e., all
    # the limits within the usage restriction must not be set to 0/null. This
    # validation is applicable for Update request action.
    #   *  `7004` - In the usage restrictions, the limits per transaction should
    # be less than or equal to Daily, Daily should be less than or equal to
    # Weekly, Weekly should be less than or equal to Monthly. Exception being
    # 0/blank will be skipped, i.e., Daily value should be less than equal to
    # Monthly value if Weekly value is 0/blank. This validation is applicable
    # for Update request action.
    #   *  `0007` - Error returned if request parameters fail validation e.g. at
    # least one card must be provided in the input.
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [UpdateBundleRequest] body Optional parameter: Update Bundle
    # Request body
    # @return [UpdateBundleResponse] response from the API call
    def restriction_bundle_update(request_id,
                                  body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/card-restrictions/v1/bundles/update',
                                     Server::DEFAULT)
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BearerToken')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(UpdateBundleResponse.method(:from_hash))
                   .local_error('400',
                                "The server cannot or will not process the request due to'\
                                 ' something that is perceived to be a client error (e.g.,'\
                                 ' malformed request syntax, invalid request message framing, or'\
                                 ' deceptive request routing).\n",
                                ErrorObjectException)
                   .local_error('401',
                                "The request has not been applied because it lacks valid '\
                                 ' authentication credentials for the target resource.\n",
                                ErrorObjectException)
                   .local_error('403',
                                'Forbidden',
                                ErrorObjectException)
                   .local_error('404',
                                "The origin server did not find a current representation  for'\
                                 ' the target resource or is not willing to disclose  that one'\
                                 ' exists.\n",
                                ErrorObjectException)
                   .local_error('500',
                                "The server encountered an unexpected condition that  prevented'\
                                 ' it from fulfilling the request.\n",
                                ErrorObjectException))
        .execute
    end

    # This API enables clients to delete an existing card bundle in the Shell
    # Card Platform. Once the card bundle is deleted the usage and product
    # restrictions of the cards that were present in the bundle will be reset
    # based on the request.
    # #### Supported operations
    #   * Delete card bundle by bundle Id
    # #### Validation rules
    #   The following are the key validation rules with the associated error
    # codes for failed validation-
    #   *  `7019` - The given card bundle is not available in the Shell Card
    # Platform.
    #   *  `0007` - Error returned if request parameters fail validation e.g.
    # mandatory check.
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [DeleteBundleRequest] body Optional parameter: Delete Bundle
    # Request body
    # @return [DeleteBundleResponse] response from the API call
    def restriction_bundle_delete(request_id,
                                  body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/card-restrictions/v1/bundles/delete',
                                     Server::DEFAULT)
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BearerToken')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DeleteBundleResponse.method(:from_hash))
                   .local_error('400',
                                "The server cannot or will not process the request due to'\
                                 ' something that is perceived to be a client error (e.g.,'\
                                 ' malformed request syntax, invalid request message framing, or'\
                                 ' deceptive request routing).\n",
                                ErrorObjectException)
                   .local_error('401',
                                "The request has not been applied because it lacks valid '\
                                 ' authentication credentials for the target resource.\n",
                                ErrorObjectException)
                   .local_error('403',
                                'Forbidden',
                                ErrorObjectException)
                   .local_error('404',
                                "The origin server did not find a current representation  for'\
                                 ' the target resource or is not willing to disclose  that one'\
                                 ' exists.\n",
                                ErrorObjectException)
                   .local_error('500',
                                "The server encountered an unexpected condition that  prevented'\
                                 ' it from fulfilling the request.\n",
                                ErrorObjectException))
        .execute
    end

    # This API allows clients to get a summary of card bundles associated with
    # Payer/Account. This API will return the basic bundle details including
    # card and restriction details. Optionally the API will also include a count
    # of cards that are not associated with the bundle but returned by the
    # search criteria.
    # Note - to include count of cards of an account that are not associated
    # with any bundles, in the input parameter SearchCardBundles either pass all
    # the bundles of the account in the list or pass only account with bundle id
    # left blank/null.
    # #### Supported operations
    #   * Get summary of bundles by list of bundle Ids
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [SummaryOfBundleRequest] body Optional parameter: Summary Bundle
    # Request body
    # @return [SummaryOfBundleResponse] response from the API call
    def restriction_bundle_summary(request_id,
                                   body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/card-restrictions/v1/bundles/Summary',
                                     Server::DEFAULT)
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BearerToken')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(SummaryOfBundleResponse.method(:from_hash))
                   .local_error('400',
                                "The server cannot or will not process the request due to'\
                                 ' something that is perceived to be a client error (e.g.,'\
                                 ' malformed request syntax, invalid request message framing, or'\
                                 ' deceptive request routing).\n",
                                ErrorObjectException)
                   .local_error('401',
                                "The request has not been applied because it lacks valid '\
                                 ' authentication credentials for the target resource.\n",
                                ErrorObjectException)
                   .local_error('403',
                                'Forbidden',
                                ErrorObjectException)
                   .local_error('404',
                                "The origin server did not find a current representation  for'\
                                 ' the target resource or is not willing to disclose  that one'\
                                 ' exists.\n",
                                ErrorObjectException)
                   .local_error('500',
                                "The server encountered an unexpected condition that  prevented'\
                                 ' it from fulfilling the request.\n",
                                ErrorObjectException))
        .execute
    end

    # This API allows to set or update the restrictions for existing cards or
    # newly ordered cards under the same payer.
    #   #### Supported operations
    #   * Set or reset usage restrictions for cards
    #   * Set or reset day/time restrictions for cards
    #   * Set or reset product restrictions for cards
    #   * Set or reset location restrictions for cards
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [RestrictionCardRequest] body Optional parameter: Summary Bundle
    # Request body
    # @return [RestrictionCardResponse] response from the API call
    def card_restriction(request_id,
                         body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/card-restrictions/v2/card',
                                     Server::DEFAULT)
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BearerToken')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(RestrictionCardResponse.method(:from_hash))
                   .local_error('400',
                                "The server cannot or will not process the request due to'\
                                 ' something that is perceived to be a client error (e.g.,'\
                                 ' malformed request syntax, invalid request message framing, or'\
                                 ' deceptive request routing).\n",
                                ErrorObjectException)
                   .local_error('401',
                                "The request has not been applied because it lacks valid '\
                                 ' authentication credentials for the target resource.\n",
                                ErrorObjectException)
                   .local_error('403',
                                'Forbidden',
                                ErrorObjectException)
                   .local_error('404',
                                "The origin server did not find a current representation  for'\
                                 ' the target resource or is not willing to disclose  that one'\
                                 ' exists.\n",
                                ErrorObjectException)
                   .local_error('500',
                                "The server encountered an unexpected condition that  prevented'\
                                 ' it from fulfilling the request.\n",
                                ErrorObjectException))
        .execute
    end

    # This operation allows setting or updating the usage restrictions of an
    # existing account.
    # #### Validation rules
    # *	The account exists.
    # *	Day time restriction cannot be set to restrict the use of a card, under
    # the account, on all days of the week.
    # *	Either of the usage, daytime or location is either marked for reset or
    # new restriction values provided for the account.
    # *	In usage restrictions, the limits per transaction should be less than or
    # equal to Daily, Daily should be less than or equal to Weekly, Weekly
    # should be less than or equal to Monthly. Exception being 0/blank will be
    # skipped, i.e., Daily value should be less than equal to Monthly value if
    # Weekly value is 0/blank.
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [AccountRestrictionRequest] body Optional parameter: Summary Bundle
    # Request body
    # @return [AccountRestrictionResponse] response from the API call
    def account_restriction(request_id,
                            body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/card-restrictions/v1/Account',
                                     Server::DEFAULT)
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BearerToken')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(AccountRestrictionResponse.method(:from_hash))
                   .local_error('400',
                                "The server cannot or will not process the request due to'\
                                 ' something that is perceived to be a client error (e.g.,'\
                                 ' malformed request syntax, invalid request message framing, or'\
                                 ' deceptive request routing).\n",
                                ErrorObjectException)
                   .local_error('401',
                                "The request has not been applied because it lacks valid '\
                                 ' authentication credentials for the target resource.\n",
                                ErrorObjectException)
                   .local_error('403',
                                'Forbidden',
                                ErrorObjectException)
                   .local_error('404',
                                "The origin server did not find a current representation  for'\
                                 ' the target resource or is not willing to disclose  that one'\
                                 ' exists.\n",
                                ErrorObjectException)
                   .local_error('500',
                                "The server encountered an unexpected condition that  prevented'\
                                 ' it from fulfilling the request.\n",
                                ErrorObjectException))
        .execute
    end

    # This operation will allow user to get account level limits for the given
    # account.
    # It returns the velocity limits if its overridden at the account else the
    # values will be null/empty.
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [SearchAccountLimitRequest] body Optional parameter: Summary Bundle
    # Request body
    # @return [SearchAccountLimitResponse] response from the API call
    def search_account_limit(request_id,
                             body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/card-restrictions/v1/searchaccountlimit',
                                     Server::DEFAULT)
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BearerToken')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(SearchAccountLimitResponse.method(:from_hash))
                   .local_error('400',
                                "The server cannot or will not process the request due to'\
                                 ' something that is perceived to be a client error (e.g.,'\
                                 ' malformed request syntax, invalid request message framing, or'\
                                 ' deceptive request routing).\n",
                                ErrorObjectException)
                   .local_error('401',
                                "The request has not been applied because it lacks valid '\
                                 ' authentication credentials for the target resource.\n",
                                ErrorObjectException)
                   .local_error('403',
                                'Forbidden',
                                ErrorObjectException)
                   .local_error('404',
                                "The origin server did not find a current representation  for'\
                                 ' the target resource or is not willing to disclose  that one'\
                                 ' exists.\n",
                                ErrorObjectException)
                   .local_error('500',
                                "The server encountered an unexpected condition that  prevented'\
                                 ' it from fulfilling the request.\n",
                                ErrorObjectException))
        .execute
    end

    # This API will allows querying card details including the day/time and
    # product restrictions.
    # #### Supported operations
    #   * Search by list of cards or bundle
    #   * Include card bundle details (optional)
    # @param [String] request_id Required parameter: Mandatory UUID (according
    # to RFC 4122 standards) for requests and responses. This will be played
    # back in the response from the request.
    # @param [RestrictionSearchCardRequest] body Optional parameter: Summary
    # Bundle Request body
    # @return [RestrictionSearchCardResponse] response from the API call
    def search_card_restriction(request_id,
                                body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/card-restrictions/v2/search',
                                     Server::DEFAULT)
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BearerToken')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(RestrictionSearchCardResponse.method(:from_hash))
                   .local_error('400',
                                "The server cannot or will not process the request due to'\
                                 ' something that is perceived to be a client error (e.g.,'\
                                 ' malformed request syntax, invalid request message framing, or'\
                                 ' deceptive request routing).\n",
                                ErrorObjectException)
                   .local_error('401',
                                "The request has not been applied because it lacks valid '\
                                 ' authentication credentials for the target resource.\n",
                                ErrorObjectException)
                   .local_error('403',
                                'Forbidden',
                                ErrorObjectException)
                   .local_error('404',
                                "The origin server did not find a current representation  for'\
                                 ' the target resource or is not willing to disclose  that one'\
                                 ' exists.\n",
                                ErrorObjectException)
                   .local_error('500',
                                "The server encountered an unexpected condition that  prevented'\
                                 ' it from fulfilling the request.\n",
                                ErrorObjectException))
        .execute
    end
  end
end
